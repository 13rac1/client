// @flow
import * as React from 'react'

type Section<T> = {
  data: $ReadOnlyArray<T>,
  /**
   * Optional key to keep track of section re-ordering. If you don't plan on re-ordering sections,
   * the array index will be used by default.
   */
  key?: string,

  // Optional props will override list-wide props just for this section.
  renderItem?: ?(info: {
    item: T,
    index: number,
    section: Section<T>,
    separators: {
      highlight: () => void,
      unhighlight: () => void,
      updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,
    },
  }) => ?React.Element<any>,
  ItemSeparatorComponent?: ?React.ComponentType<any>,
  keyExtractor?: (item: T) => string,
}
type Props<T> = {
  sections: $ReadOnlyArray<Section<T>>,
  renderItem?: (info: {
    item: T,
    index: number,
    section: Section<T>,
    separators: {
      highlight: () => void,
      unhighlight: () => void,
      updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,
    },
  }) => ?React.Element<any>,
}

export default class KBSectionList<T> extends React.Component<Props<T>> {}
