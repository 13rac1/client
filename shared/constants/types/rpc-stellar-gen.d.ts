/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.
import {Effect} from 'redux-saga'
import * as Keybase1 from './rpc-gen'
export {Keybase1}
export type Bool = boolean
export type Boolean = boolean
export type Bytes = Buffer
export type Double = number
export type Int = number
export type Int64 = number
export type Long = number
export type String = string
export type Uint = number
export type Uint64 = number
type WaitingKey = string | Array<string>
export type IncomingErrorCallback = (
  arg0: {
    code?: number
    desc?: string
  } | null
) => void
type IncomingReturn = Effect | null | void | false | Array<Effect | null | void | false>

export type MessageTypes = {
  'stellar.1.local.acceptDisclaimerLocal': {
    inParam: void
    outParam: void
  }
  'stellar.1.local.airdropDetailsLocal': {
    inParam: void
    outParam: String
  }
  'stellar.1.local.airdropRegisterLocal': {
    inParam: {
      readonly register: Boolean
    }
    outParam: void
  }
  'stellar.1.local.airdropStatusLocal': {
    inParam: void
    outParam: AirdropStatus
  }
  'stellar.1.local.buildPaymentLocal': {
    inParam: {
      readonly bid: BuildPaymentID
      readonly from: AccountID
      readonly fromPrimaryAccount: Boolean
      readonly to: String
      readonly toIsAccountID: Boolean
      readonly amount: String
      readonly currency?: OutsideCurrencyCode | null
      readonly asset?: Asset | null
      readonly secretNote: String
      readonly publicMemo: String
    }
    outParam: BuildPaymentResLocal
  }
  'stellar.1.local.buildRequestLocal': {
    inParam: {
      readonly to: String
      readonly amount: String
      readonly asset?: Asset | null
      readonly currency?: OutsideCurrencyCode | null
      readonly secretNote: String
    }
    outParam: BuildRequestResLocal
  }
  'stellar.1.local.cancelPaymentLocal': {
    inParam: {
      readonly paymentID: PaymentID
    }
    outParam: RelayClaimResult
  }
  'stellar.1.local.cancelRequestLocal': {
    inParam: {
      readonly reqID: KeybaseRequestID
    }
    outParam: void
  }
  'stellar.1.local.changeDisplayCurrencyLocal': {
    inParam: {
      readonly accountID: AccountID
      readonly currency: OutsideCurrencyCode
    }
    outParam: void
  }
  'stellar.1.local.changeWalletAccountNameLocal': {
    inParam: {
      readonly accountID: AccountID
      readonly newName: String
    }
    outParam: void
  }
  'stellar.1.local.createWalletAccountLocal': {
    inParam: {
      readonly name: String
    }
    outParam: AccountID
  }
  'stellar.1.local.deleteWalletAccountLocal': {
    inParam: {
      readonly accountID: AccountID
      readonly userAcknowledged: String
    }
    outParam: void
  }
  'stellar.1.local.getAccountAssetsLocal': {
    inParam: {
      readonly accountID: AccountID
    }
    outParam: Array<AccountAssetLocal> | null
  }
  'stellar.1.local.getDisplayCurrenciesLocal': {
    inParam: void
    outParam: Array<CurrencyLocal> | null
  }
  'stellar.1.local.getDisplayCurrencyLocal': {
    inParam: {
      readonly accountID?: AccountID | null
    }
    outParam: CurrencyLocal
  }
  'stellar.1.local.getInflationDestinationLocal': {
    inParam: {
      readonly accountID: AccountID
    }
    outParam: InflationDestinationResultLocal
  }
  'stellar.1.local.getPaymentDetailsLocal': {
    inParam: {
      readonly accountID: AccountID
      readonly id: PaymentID
    }
    outParam: PaymentDetailsLocal
  }
  'stellar.1.local.getPaymentsLocal': {
    inParam: {
      readonly accountID: AccountID
      readonly cursor?: PageCursor | null
    }
    outParam: PaymentsPageLocal
  }
  'stellar.1.local.getPendingPaymentsLocal': {
    inParam: {
      readonly accountID: AccountID
    }
    outParam: Array<PaymentOrErrorLocal> | null
  }
  'stellar.1.local.getPredefinedInflationDestinationsLocal': {
    inParam: void
    outParam: Array<PredefinedInflationDestination> | null
  }
  'stellar.1.local.getSendAssetChoicesLocal': {
    inParam: {
      readonly from: AccountID
      readonly to: String
    }
    outParam: Array<SendAssetChoiceLocal> | null
  }
  'stellar.1.local.getWalletAccountLocal': {
    inParam: {
      readonly accountID: AccountID
    }
    outParam: WalletAccountLocal
  }
  'stellar.1.local.getWalletAccountSecretKeyLocal': {
    inParam: {
      readonly accountID: AccountID
    }
    outParam: SecretKey
  }
  'stellar.1.local.getWalletAccountsLocal': {
    inParam: void
    outParam: Array<WalletAccountLocal> | null
  }
  'stellar.1.local.hasAcceptedDisclaimerLocal': {
    inParam: void
    outParam: Bool
  }
  'stellar.1.local.isAccountMobileOnlyLocal': {
    inParam: {
      readonly accountID: AccountID
    }
    outParam: Boolean
  }
  'stellar.1.local.linkNewWalletAccountLocal': {
    inParam: {
      readonly secretKey: SecretKey
      readonly name: String
    }
    outParam: AccountID
  }
  'stellar.1.local.makeRequestLocal': {
    inParam: {
      readonly recipient: String
      readonly asset?: Asset | null
      readonly currency?: OutsideCurrencyCode | null
      readonly amount: String
      readonly note: String
    }
    outParam: KeybaseRequestID
  }
  'stellar.1.local.markAsReadLocal': {
    inParam: {
      readonly accountID: AccountID
      readonly mostRecentID: PaymentID
    }
    outParam: void
  }
  'stellar.1.local.reviewPaymentLocal': {
    inParam: {
      readonly reviewID: Int
      readonly bid: BuildPaymentID
    }
    outParam: void
  }
  'stellar.1.local.sendPaymentLocal': {
    inParam: {
      readonly bid: BuildPaymentID
      readonly bypassBid: Boolean
      readonly bypassReview: Boolean
      readonly from: AccountID
      readonly to: String
      readonly toIsAccountID: Boolean
      readonly amount: String
      readonly asset: Asset
      readonly worthAmount: String
      readonly worthCurrency?: OutsideCurrencyCode | null
      readonly secretNote: String
      readonly publicMemo: String
      readonly quickReturn: Boolean
    }
    outParam: SendPaymentResLocal
  }
  'stellar.1.local.setAccountAllDevicesLocal': {
    inParam: {
      readonly accountID: AccountID
    }
    outParam: void
  }
  'stellar.1.local.setAccountMobileOnlyLocal': {
    inParam: {
      readonly accountID: AccountID
    }
    outParam: void
  }
  'stellar.1.local.setInflationDestinationLocal': {
    inParam: {
      readonly accountID: AccountID
      readonly destination: AccountID
    }
    outParam: void
  }
  'stellar.1.local.setWalletAccountAsDefaultLocal': {
    inParam: {
      readonly accountID: AccountID
    }
    outParam: void
  }
  'stellar.1.local.startBuildPaymentLocal': {
    inParam: void
    outParam: BuildPaymentID
  }
  'stellar.1.local.stopBuildPaymentLocal': {
    inParam: {
      readonly bid: BuildPaymentID
    }
    outParam: void
  }
  'stellar.1.local.validateAccountNameLocal': {
    inParam: {
      readonly name: String
    }
    outParam: void
  }
  'stellar.1.local.validateSecretKeyLocal': {
    inParam: {
      readonly secretKey: SecretKey
    }
    outParam: void
  }
  'stellar.1.notify.accountDetailsUpdate': {
    inParam: {
      readonly accountID: AccountID
      readonly account: WalletAccountLocal
    }
    outParam: void
  }
  'stellar.1.notify.accountsUpdate': {
    inParam: {
      readonly accounts?: Array<WalletAccountLocal> | null
    }
    outParam: void
  }
  'stellar.1.notify.paymentNotification': {
    inParam: {
      readonly accountID: AccountID
      readonly paymentID: PaymentID
    }
    outParam: void
  }
  'stellar.1.notify.paymentStatusNotification': {
    inParam: {
      readonly accountID: AccountID
      readonly paymentID: PaymentID
    }
    outParam: void
  }
  'stellar.1.notify.pendingPaymentsUpdate': {
    inParam: {
      readonly accountID: AccountID
      readonly pending?: Array<PaymentOrErrorLocal> | null
    }
    outParam: void
  }
  'stellar.1.notify.recentPaymentsUpdate': {
    inParam: {
      readonly accountID: AccountID
      readonly firstPage: PaymentsPageLocal
    }
    outParam: void
  }
  'stellar.1.notify.requestStatusNotification': {
    inParam: {
      readonly reqID: KeybaseRequestID
    }
    outParam: void
  }
  'stellar.1.ui.paymentReviewed': {
    inParam: {
      readonly msg: UIPaymentReviewed
    }
    outParam: void
  }
}

export declare const bundleAccountBundleVersion: {
  v1: 1
  v2: 2
  v3: 3
  v4: 4
  v5: 5
  v6: 6
  v7: 7
  v8: 8
  v9: 9
  v10: 10
}

export const bundleBundleVersion: {
  v1: 1
  v2: 2
  v3: 3
  v4: 4
  v5: 5
  v6: 6
  v7: 7
  v8: 8
  v9: 9
  v10: 10
}

export const commonAccountMode: {
  none: 0,
  user: 1,
  mobile: 2,
}

export const commonPaymentStrategy: {
  none: 0,
  direct: 1,
  relay: 2,
}

export const commonRelayDirection: {
  claim: 0,
  yank: 1,
}

export const commonRequestStatus: {
  ok: 0,
  canceled: 1,
  done: 2,
}

export const commonTransactionStatus: {
  none: 0,
  pending: 1,
  success: 2,
  errorTransient: 3,
  errorPermanent: 4,
}

export const localBalanceDelta: {
  none: 0,
  increase: 1,
  decrease: 2,
}

export const localParticipantType: {
  none: 0,
  keybase: 1,
  stellar: 2,
  sbs: 3,
  ownaccount: 4,
}

export const localPaymentStatus: {
  none: 0,
  pending: 1,
  claimable: 2,
  completed: 3,
  error: 4,
  unknown: 5,
  canceled: 6,
}

export const remotePaymentSummaryType: {
  none: 0,
  stellar: 1,
  direct: 2,
  relay: 3,
}
export type AccountAssetLocal = {
  readonly name: String
  readonly assetCode: String
  readonly issuerName: String
  readonly issuerAccountID: String
  readonly issuerVerifiedDomain: String
  readonly balanceTotal: String
  readonly balanceAvailableToSend: String
  readonly worthCurrency: String
  readonly worth: String
  readonly availableToSendWorth: String
  readonly reserves?: Array<AccountReserve> | null
}
export type AccountBundle = {
  readonly prev: Hash
  readonly ownHash: Hash
  readonly accountID: AccountID
  readonly signers?: Array<SecretKey> | null
}
export type AccountBundleSecretUnsupported = {}
export type AccountBundleSecretV1 = {
  readonly accountID: AccountID
  readonly signers?: Array<SecretKey> | null
}
export type AccountBundleSecretVersioned =
  | {
      version: 1
      v1: AccountBundleSecretV1 | null
    }
  | {
      version: 2
      v2: AccountBundleSecretUnsupported | null
    }
  | {
      version: 3
      v3: AccountBundleSecretUnsupported | null
    }
  | {
      version: 4
      v4: AccountBundleSecretUnsupported | null
    }
  | {
      version: 5
      v5: AccountBundleSecretUnsupported | null
    }
  | {
      version: 6
      v6: AccountBundleSecretUnsupported | null
    }
  | {
      version: 7
      v7: AccountBundleSecretUnsupported | null
    }
  | {
      version: 8
      v8: AccountBundleSecretUnsupported | null
    }
  | {
      version: 9
      v9: AccountBundleSecretUnsupported | null
    }
  | {
      version: 10
      v10: AccountBundleSecretUnsupported | null
    }
export type AccountBundleVersion = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 // V10_10

export type AccountDetails = {
  readonly accountID: AccountID
  readonly seqno: String
  readonly balances?: Array<Balance> | null
  readonly subentryCount: Int
  readonly available: String
  readonly reserves?: Array<AccountReserve> | null
  readonly readTransactionID?: TransactionID | null
  readonly unreadPayments: Int
  readonly displayCurrency: String
  readonly inflationDestination?: AccountID | null
}
export type AccountID = String
export type AccountMode = 0 | 1 | 2 // MOBILE_2

export type AccountReserve = {
  readonly amount: String
  readonly description: String
}
export type AirdropQualification = {
  readonly title: String
  readonly subtitle: String
  readonly valid: Boolean
}
export type AirdropState = String
export type AirdropStatus = {
  readonly state: AirdropState
  readonly rows?: Array<AirdropQualification> | null
}
export type Asset = {
  readonly type: String
  readonly code: String
  readonly issuer: String
  readonly verifiedDomain: String
  readonly issuerName: String
}
export type AutoClaim = {
  readonly kbTxID: KeybaseTransactionID
}
export type Balance = {
  readonly asset: Asset
  readonly amount: String
  readonly limit: String
}
export type BalanceDelta = 0 | 1 | 2 // DECREASE_2

export type BatchPaymentArg = {
  readonly recipient: String
  readonly amount: String
  readonly message: String
}
export type BatchPaymentError = {
  readonly message: String
  readonly code: Int
}
export type BatchPaymentResult = {
  readonly username: String
  readonly startTime: TimeMs
  readonly submittedTime: TimeMs
  readonly endTime: TimeMs
  readonly txID: TransactionID
  readonly status: PaymentStatus
  readonly statusDescription: String
  readonly error?: BatchPaymentError | null
}
export type BatchResultLocal = {
  readonly startTime: TimeMs
  readonly preparedTime: TimeMs
  readonly allSubmittedTime: TimeMs
  readonly allCompleteTime: TimeMs
  readonly endTime: TimeMs
  readonly payments?: Array<BatchPaymentResult> | null
  readonly overallDurationMs: TimeMs
  readonly prepareDurationMs: TimeMs
  readonly submitDurationMs: TimeMs
  readonly waitPaymentsDurationMs: TimeMs
  readonly waitChatDurationMs: TimeMs
  readonly countSuccess: Int
  readonly countDirect: Int
  readonly countRelay: Int
  readonly countError: Int
  readonly countPending: Int
  readonly avgDurationMs: TimeMs
  readonly avgSuccessDurationMs: TimeMs
  readonly avgDirectDurationMs: TimeMs
  readonly avgRelayDurationMs: TimeMs
  readonly avgErrorDurationMs: TimeMs
}
export type BuildPaymentID = String
export type BuildPaymentResLocal = {
  readonly readyToReview: Boolean
  readonly from: AccountID
  readonly toErrMsg: String
  readonly amountErrMsg: String
  readonly secretNoteErrMsg: String
  readonly publicMemoErrMsg: String
  readonly worthDescription: String
  readonly worthInfo: String
  readonly worthAmount: String
  readonly worthCurrency: String
  readonly displayAmountXLM: String
  readonly displayAmountFiat: String
  readonly sendingIntentionXLM: Boolean
  readonly amountAvailable: String
  readonly banners?: Array<SendBannerLocal> | null
}
export type BuildRequestResLocal = {
  readonly readyToRequest: Boolean
  readonly toErrMsg: String
  readonly amountErrMsg: String
  readonly secretNoteErrMsg: String
  readonly worthDescription: String
  readonly worthInfo: String
  readonly displayAmountXLM: String
  readonly displayAmountFiat: String
  readonly sendingIntentionXLM: Boolean
  readonly banners?: Array<SendBannerLocal> | null
}
export type Bundle = {
  readonly revision: BundleRevision
  readonly prev: Hash
  readonly ownHash: Hash
  readonly accounts?: Array<BundleEntry> | null
  readonly accountBundles: {[K in string]: AccountBundle}
}
export type BundleEntry = {
  readonly accountID: AccountID
  readonly mode: AccountMode
  readonly isPrimary: Boolean
  readonly name: String
  readonly acctBundleRevision: BundleRevision
  readonly encAcctBundleHash: Hash
}
export type BundleRevision = Uint64
export type BundleSecretEntryV2 = {
  readonly accountID: AccountID
  readonly name: String
}
export type BundleSecretUnsupported = {}
export type BundleSecretV2 = {
  readonly visibleHash: Hash
  readonly accounts?: Array<BundleSecretEntryV2> | null
}
export type BundleSecretVersioned =
  | {
      version: 1
      v1: BundleSecretUnsupported | null
    }
  | {
      version: 2
      v2: BundleSecretV2 | null
    }
  | {
      version: 3
      v3: BundleSecretUnsupported | null
    }
  | {
      version: 4
      v4: BundleSecretUnsupported | null
    }
  | {
      version: 5
      v5: BundleSecretUnsupported | null
    }
  | {
      version: 6
      v6: BundleSecretUnsupported | null
    }
  | {
      version: 7
      v7: BundleSecretUnsupported | null
    }
  | {
      version: 8
      v8: BundleSecretUnsupported | null
    }
  | {
      version: 9
      v9: BundleSecretUnsupported | null
    }
  | {
      version: 10
      v10: BundleSecretUnsupported | null
    }
export type BundleVersion = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 // V10_10

export type BundleVisibleEntryV2 = {
  readonly accountID: AccountID
  readonly mode: AccountMode
  readonly isPrimary: Boolean
  readonly acctBundleRevision: BundleRevision
  readonly encAcctBundleHash: Hash
}
export type BundleVisibleV2 = {
  readonly revision: BundleRevision
  readonly prev: Hash
  readonly accounts?: Array<BundleVisibleEntryV2> | null
}
export type ChatConversationID = String
export type ClaimSummary = {
  readonly txID: TransactionID
  readonly txStatus: TransactionStatus
  readonly txErrMsg: String
  readonly dir: RelayDirection
  readonly toStellar: AccountID
  readonly to: Keybase1.UserVersion
}
export type CurrencyLocal = {
  readonly description: String
  readonly code: OutsideCurrencyCode
  readonly symbol: String
  readonly name: String
}
export type CurrencySymbol = {
  readonly symbol: String
  readonly ambigious: Boolean
  readonly postfix: Boolean
}
export type DetailsPlusPayments = {
  readonly details: AccountDetails
  readonly recentPayments: PaymentsPage
  readonly pendingPayments?: Array<PaymentSummary> | null
}
export type EncryptedAccountBundle = {
  readonly v: Int
  readonly e: Bytes
  readonly n: Keybase1.BoxNonce
  readonly gen: Keybase1.PerUserKeyGeneration
}
export type EncryptedBundle = {
  readonly v: Int
  readonly e: Bytes
  readonly n: Keybase1.BoxNonce
  readonly gen: Keybase1.PerUserKeyGeneration
}
export type EncryptedNote = {
  readonly v: Int
  readonly e: Bytes
  readonly n: Keybase1.BoxNonce
  readonly sender: NoteRecipient
  readonly recipient?: NoteRecipient | null
}
export type EncryptedRelaySecret = {
  readonly v: Int
  readonly e: Bytes
  readonly n: Keybase1.BoxNonce
  readonly gen: Keybase1.PerTeamKeyGeneration
}
export type Hash = Bytes
export type InflationDestinationResultLocal = {
  readonly destination?: AccountID | null
  readonly knownDestination?: PredefinedInflationDestination | null
  readonly self: Boolean
}
export type InflationDestinationTag = String
export type KeybaseRequestID = String
export type KeybaseTransactionID = String
export type LookupResultCLILocal = {
  readonly accountID: AccountID
  readonly username?: String | null
}
export type NetworkOptions = {
  readonly baseFee: Uint64
}
export type NoteContents = {
  readonly note: String
  readonly stellarID: TransactionID
}
export type NoteRecipient = {
  readonly user: Keybase1.UserVersion
  readonly pukGen: Keybase1.PerUserKeyGeneration
}
export type OutsideCurrencyCode = String
export type OutsideCurrencyDefinition = {
  readonly name: String
  readonly symbol: CurrencySymbol
}
export type OutsideExchangeRate = {
  readonly currency: OutsideCurrencyCode
  readonly rate: String
}
export type OwnAccountCLILocal = {
  readonly accountID: AccountID
  readonly isPrimary: Boolean
  readonly name: String
  readonly balance?: Array<Balance> | null
  readonly exchangeRate?: OutsideExchangeRate | null
  readonly accountMode: AccountMode
}
export type PageCursor = {
  readonly horizonCursor: String
  readonly directCursor: String
  readonly relayCursor: String
}
export type ParticipantType = 0 | 1 | 2 | 3 | 4 // OWNACCOUNT_4

export type PaymentCLILocal = {
  readonly txID: TransactionID
  readonly time: TimeMs
  readonly status: String
  readonly statusDetail: String
  readonly amount: String
  readonly asset: Asset
  readonly displayAmount?: String | null
  readonly displayCurrency?: String | null
  readonly fromStellar: AccountID
  readonly toStellar?: AccountID | null
  readonly fromUsername?: String | null
  readonly toUsername?: String | null
  readonly toAssertion?: String | null
  readonly note: String
  readonly noteErr: String
  readonly unread: Boolean
}
export type PaymentDetails = {
  readonly summary: PaymentSummary
  readonly memo: String
  readonly memoType: String
  readonly externalTxURL: String
}
export type PaymentDetailsLocal = {
  readonly id: PaymentID
  readonly txID: TransactionID
  readonly time: TimeMs
  readonly statusSimplified: PaymentStatus
  readonly statusDescription: String
  readonly statusDetail: String
  readonly showCancel: Boolean
  readonly amountDescription: String
  readonly delta: BalanceDelta
  readonly worth: String
  readonly worthAtSendTime: String
  readonly issuerDescription: String
  readonly issuerAccountID?: AccountID | null
  readonly fromType: ParticipantType
  readonly toType: ParticipantType
  readonly fromAccountID: AccountID
  readonly fromAccountName: String
  readonly fromUsername: String
  readonly toAccountID?: AccountID | null
  readonly toAccountName: String
  readonly toUsername: String
  readonly toAssertion: String
  readonly originalToAssertion: String
  readonly note: String
  readonly noteErr: String
  readonly publicNote: String
  readonly publicNoteType: String
  readonly externalTxURL: String
  readonly batchID: String
  readonly fromAirdrop: Boolean
}
export type PaymentDirectPost = {
  readonly fromDeviceID: Keybase1.DeviceID
  readonly to?: Keybase1.UserVersion | null
  readonly displayAmount: String
  readonly displayCurrency: String
  readonly noteB64: String
  readonly signedTransaction: String
  readonly quickReturn: Boolean
  readonly chatConversationID?: ChatConversationID | null
}
export type PaymentID = String
export type PaymentLocal = {
  readonly id: PaymentID
  readonly time: TimeMs
  readonly statusSimplified: PaymentStatus
  readonly statusDescription: String
  readonly statusDetail: String
  readonly showCancel: Boolean
  readonly amountDescription: String
  readonly delta: BalanceDelta
  readonly worth: String
  readonly worthAtSendTime: String
  readonly issuerDescription: String
  readonly issuerAccountID?: AccountID | null
  readonly fromType: ParticipantType
  readonly toType: ParticipantType
  readonly fromAccountID: AccountID
  readonly fromAccountName: String
  readonly fromUsername: String
  readonly toAccountID?: AccountID | null
  readonly toAccountName: String
  readonly toUsername: String
  readonly toAssertion: String
  readonly originalToAssertion: String
  readonly note: String
  readonly noteErr: String
  readonly unread: Boolean
  readonly batchID: String
  readonly fromAirdrop: Boolean
}
export type PaymentNotificationMsg = {
  readonly accountID: AccountID
  readonly paymentID: PaymentID
}
export type PaymentOrErrorCLILocal = {
  readonly payment?: PaymentCLILocal | null
  readonly err?: String | null
}
export type PaymentOrErrorLocal = {
  readonly payment?: PaymentLocal | null
  readonly err?: String | null
}
export type PaymentRelayPost = {
  readonly fromDeviceID: Keybase1.DeviceID
  readonly to?: Keybase1.UserVersion | null
  readonly toAssertion: String
  readonly relayAccount: AccountID
  readonly teamID: Keybase1.TeamID
  readonly displayAmount: String
  readonly displayCurrency: String
  readonly boxB64: String
  readonly signedTransaction: String
  readonly quickReturn: Boolean
  readonly chatConversationID?: ChatConversationID | null
}
export type PaymentResult = {
  readonly senderAccountID: AccountID
  readonly keybaseID: KeybaseTransactionID
  readonly stellarID: TransactionID
  readonly pending: Boolean
}
export type PaymentStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6 // CANCELED_6

export type PaymentStatusMsg = {
  readonly accountID: AccountID
  readonly kbTxID: KeybaseTransactionID
  readonly txID: TransactionID
}
export type PaymentStrategy = 0 | 1 | 2 // RELAY_2

export type PaymentSummary =
  | {
      typ: 1
      stellar: PaymentSummaryStellar | null
    }
  | {
      typ: 2
      direct: PaymentSummaryDirect | null
    }
  | {
      typ: 3
      relay: PaymentSummaryRelay | null
    }
export type PaymentSummaryDirect = {
  readonly kbTxID: KeybaseTransactionID
  readonly txID: TransactionID
  readonly txStatus: TransactionStatus
  readonly txErrMsg: String
  readonly fromStellar: AccountID
  readonly from: Keybase1.UserVersion
  readonly fromDeviceID: Keybase1.DeviceID
  readonly toStellar: AccountID
  readonly to?: Keybase1.UserVersion | null
  readonly amount: String
  readonly asset: Asset
  readonly displayAmount?: String | null
  readonly displayCurrency?: String | null
  readonly noteB64: String
  readonly fromDisplayAmount: String
  readonly fromDisplayCurrency: String
  readonly toDisplayAmount: String
  readonly toDisplayCurrency: String
  readonly ctime: TimeMs
  readonly rtime: TimeMs
  readonly cursorToken: String
  readonly fromPrimary: Boolean
  readonly batchID: String
  readonly fromAirdrop: Boolean
}
export type PaymentSummaryRelay = {
  readonly kbTxID: KeybaseTransactionID
  readonly txID: TransactionID
  readonly txStatus: TransactionStatus
  readonly txErrMsg: String
  readonly fromStellar: AccountID
  readonly from: Keybase1.UserVersion
  readonly fromDeviceID: Keybase1.DeviceID
  readonly to?: Keybase1.UserVersion | null
  readonly toAssertion: String
  readonly relayAccount: AccountID
  readonly amount: String
  readonly displayAmount?: String | null
  readonly displayCurrency?: String | null
  readonly ctime: TimeMs
  readonly rtime: TimeMs
  readonly boxB64: String
  readonly teamID: Keybase1.TeamID
  readonly claim?: ClaimSummary | null
  readonly cursorToken: String
  readonly batchID: String
  readonly fromAirdrop: Boolean
}
export type PaymentSummaryStellar = {
  readonly txID: TransactionID
  readonly from: AccountID
  readonly to: AccountID
  readonly amount: String
  readonly asset: Asset
  readonly ctime: TimeMs
  readonly cursorToken: String
  readonly unread: Boolean
  readonly isInflation: Boolean
  readonly inflationSource?: String | null
}
export type PaymentSummaryType = 0 | 1 | 2 | 3 // RELAY_3

export type PaymentsPage = {
  readonly payments?: Array<PaymentSummary> | null
  readonly cursor?: PageCursor | null
  readonly oldestUnread?: TransactionID | null
}
export type PaymentsPageLocal = {
  readonly payments?: Array<PaymentOrErrorLocal> | null
  readonly cursor?: PageCursor | null
  readonly oldestUnread?: PaymentID | null
}
export type PredefinedInflationDestination = {
  readonly tag: InflationDestinationTag
  readonly name: String
  readonly recommended: Boolean
  readonly accountID: AccountID
  readonly url: String
}
export type RelayClaimPost = {
  readonly keybaseID: KeybaseTransactionID
  readonly dir: RelayDirection
  readonly signedTransaction: String
  readonly autoClaimToken?: String | null
}
export type RelayClaimResult = {
  readonly claimStellarID: TransactionID
}
export type RelayContents = {
  readonly stellarID: TransactionID
  readonly sk: SecretKey
  readonly note: String
}
export type RelayDirection = 0 | 1 // YANK_1

export type RequestDetails = {
  readonly id: KeybaseRequestID
  readonly fromUser: Keybase1.UserVersion
  readonly toUser?: Keybase1.UserVersion | null
  readonly toAssertion: String
  readonly amount: String
  readonly asset?: Asset | null
  readonly currency?: OutsideCurrencyCode | null
  readonly fromDisplayAmount: String
  readonly fromDisplayCurrency: String
  readonly toDisplayAmount: String
  readonly toDisplayCurrency: String
  readonly fundingKbTxID: KeybaseTransactionID
  readonly status: RequestStatus
}
export type RequestDetailsLocal = {
  readonly id: KeybaseRequestID
  readonly fromAssertion: String
  readonly fromCurrentUser: Boolean
  readonly toUserType: ParticipantType
  readonly toAssertion: String
  readonly amount: String
  readonly asset?: Asset | null
  readonly currency?: OutsideCurrencyCode | null
  readonly amountDescription: String
  readonly worthAtRequestTime: String
  readonly status: RequestStatus
}
export type RequestPost = {
  readonly toUser?: Keybase1.UserVersion | null
  readonly toAssertion: String
  readonly amount: String
  readonly asset?: Asset | null
  readonly currency?: OutsideCurrencyCode | null
}
export type RequestStatus = 0 | 1 | 2 // DONE_2

export type RequestStatusMsg = {
  readonly reqID: KeybaseRequestID
}
export type SecretKey = String
export type SendAssetChoiceLocal = {
  readonly asset: Asset
  readonly enabled: Boolean
  readonly left: String
  readonly right: String
  readonly subtext: String
}
export type SendBannerLocal = {
  readonly level: String
  readonly message: String
  readonly proofsChanged: Boolean
}
export type SendPaymentResLocal = {
  readonly kbTxID: KeybaseTransactionID
  readonly pending: Boolean
}
export type SendResultCLILocal = {
  readonly kbTxID: KeybaseTransactionID
  readonly txID: TransactionID
}
export type StellarServerDefinitions = {
  readonly revision: Int
  readonly currencies: {[K in string]: OutsideCurrencyDefinition}
}
export type TimeMs = Long
export type TimeboundsRecommendation = {
  readonly timeNow: Keybase1.UnixTime
  readonly timeout: Int64
}
export type TransactionID = String
export type TransactionStatus = 0 | 1 | 2 | 3 | 4 // ERROR_PERMANENT_4

export type UIPaymentReviewed = {
  readonly bid: BuildPaymentID
  readonly reviewID: Int
  readonly seqno: Int
  readonly banners?: Array<SendBannerLocal> | null
  readonly nextButton: String
}
export type WalletAccountLocal = {
  readonly accountID: AccountID
  readonly isDefault: Boolean
  readonly name: String
  readonly balanceDescription: String
  readonly seqno: String
  readonly currencyLocal: CurrencyLocal
  readonly accountMode: AccountMode
  readonly accountModeEditable: Boolean
  readonly isFunded: Boolean
  readonly canSubmitTx: Boolean
}

export type IncomingCallMapType = {
  'stellar.1.notify.paymentNotification'?: (
    params: MessageTypes['stellar.1.notify.paymentNotification']['inParam'] & {
      sessionID: number
    }
  ) => IncomingReturn
  'stellar.1.notify.paymentStatusNotification'?: (
    params: MessageTypes['stellar.1.notify.paymentStatusNotification']['inParam'] & {
      sessionID: number
    }
  ) => IncomingReturn
  'stellar.1.notify.requestStatusNotification'?: (
    params: MessageTypes['stellar.1.notify.requestStatusNotification']['inParam'] & {
      sessionID: number
    }
  ) => IncomingReturn
  'stellar.1.notify.accountDetailsUpdate'?: (
    params: MessageTypes['stellar.1.notify.accountDetailsUpdate']['inParam'] & {
      sessionID: number
    }
  ) => IncomingReturn
  'stellar.1.notify.accountsUpdate'?: (
    params: MessageTypes['stellar.1.notify.accountsUpdate']['inParam'] & {
      sessionID: number
    }
  ) => IncomingReturn
  'stellar.1.notify.pendingPaymentsUpdate'?: (
    params: MessageTypes['stellar.1.notify.pendingPaymentsUpdate']['inParam'] & {
      sessionID: number
    }
  ) => IncomingReturn
  'stellar.1.notify.recentPaymentsUpdate'?: (
    params: MessageTypes['stellar.1.notify.recentPaymentsUpdate']['inParam'] & {
      sessionID: number
    }
  ) => IncomingReturn
  'stellar.1.ui.paymentReviewed'?: (
    params: MessageTypes['stellar.1.ui.paymentReviewed']['inParam'] & {
      sessionID: number
    }
  ) => IncomingReturn
}

export type CustomResponseIncomingCallMap = {
  'stellar.1.ui.paymentReviewed'?: (
    params: MessageTypes['stellar.1.ui.paymentReviewed']['inParam'] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback
      result: ($PropertyType: MessageTypes['stellar.1.ui.paymentReviewed']['outParam']) => void
    }
  ) => IncomingReturn
}

export declare function localAcceptDisclaimerLocalRpcPromise(params: MessageTypes['stellar.1.local.acceptDisclaimerLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.acceptDisclaimerLocal']['outParam']>

export declare function localAirdropDetailsLocalRpcPromise(params: MessageTypes['stellar.1.local.airdropDetailsLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.airdropDetailsLocal']['outParam']>

export declare function localAirdropRegisterLocalRpcPromise(params: MessageTypes['stellar.1.local.airdropRegisterLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.airdropRegisterLocal']['outParam']>

export declare function localAirdropStatusLocalRpcPromise(params: MessageTypes['stellar.1.local.airdropStatusLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.airdropStatusLocal']['outParam']>

export declare function localBuildPaymentLocalRpcPromise(params: MessageTypes['stellar.1.local.buildPaymentLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.buildPaymentLocal']['outParam']>

export declare function localBuildRequestLocalRpcPromise(params: MessageTypes['stellar.1.local.buildRequestLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.buildRequestLocal']['outParam']>

export declare function localCancelPaymentLocalRpcPromise(params: MessageTypes['stellar.1.local.cancelPaymentLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.cancelPaymentLocal']['outParam']>

export declare function localCancelRequestLocalRpcPromise(params: MessageTypes['stellar.1.local.cancelRequestLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.cancelRequestLocal']['outParam']>

export declare function localChangeDisplayCurrencyLocalRpcPromise(params: MessageTypes['stellar.1.local.changeDisplayCurrencyLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.changeDisplayCurrencyLocal']['outParam']>

export declare function localChangeWalletAccountNameLocalRpcPromise(params: MessageTypes['stellar.1.local.changeWalletAccountNameLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.changeWalletAccountNameLocal']['outParam']>

export declare function localCreateWalletAccountLocalRpcPromise(params: MessageTypes['stellar.1.local.createWalletAccountLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.createWalletAccountLocal']['outParam']>

export declare function localDeleteWalletAccountLocalRpcPromise(params: MessageTypes['stellar.1.local.deleteWalletAccountLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.deleteWalletAccountLocal']['outParam']>

export declare function localGetAccountAssetsLocalRpcPromise(params: MessageTypes['stellar.1.local.getAccountAssetsLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getAccountAssetsLocal']['outParam']>

export declare function localGetDisplayCurrenciesLocalRpcPromise(params: MessageTypes['stellar.1.local.getDisplayCurrenciesLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getDisplayCurrenciesLocal']['outParam']>

export declare function localGetDisplayCurrencyLocalRpcPromise(params: MessageTypes['stellar.1.local.getDisplayCurrencyLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getDisplayCurrencyLocal']['outParam']>

export declare function localGetInflationDestinationLocalRpcPromise(params: MessageTypes['stellar.1.local.getInflationDestinationLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getInflationDestinationLocal']['outParam']>

export declare function localGetPaymentDetailsLocalRpcPromise(params: MessageTypes['stellar.1.local.getPaymentDetailsLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getPaymentDetailsLocal']['outParam']>

export declare function localGetPaymentsLocalRpcPromise(params: MessageTypes['stellar.1.local.getPaymentsLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getPaymentsLocal']['outParam']>

export declare function localGetPendingPaymentsLocalRpcPromise(params: MessageTypes['stellar.1.local.getPendingPaymentsLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getPendingPaymentsLocal']['outParam']>

export declare function localGetPredefinedInflationDestinationsLocalRpcPromise(params: MessageTypes['stellar.1.local.getPredefinedInflationDestinationsLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getPredefinedInflationDestinationsLocal']['outParam']>

export declare function localGetSendAssetChoicesLocalRpcPromise(params: MessageTypes['stellar.1.local.getSendAssetChoicesLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getSendAssetChoicesLocal']['outParam']>

export declare function localGetWalletAccountLocalRpcPromise(params: MessageTypes['stellar.1.local.getWalletAccountLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getWalletAccountLocal']['outParam']>

export declare function localGetWalletAccountSecretKeyLocalRpcPromise(params: MessageTypes['stellar.1.local.getWalletAccountSecretKeyLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getWalletAccountSecretKeyLocal']['outParam']>

export declare function localGetWalletAccountsLocalRpcPromise(params: MessageTypes['stellar.1.local.getWalletAccountsLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.getWalletAccountsLocal']['outParam']>

export declare function localHasAcceptedDisclaimerLocalRpcPromise(params: MessageTypes['stellar.1.local.hasAcceptedDisclaimerLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.hasAcceptedDisclaimerLocal']['outParam']>

export declare function localIsAccountMobileOnlyLocalRpcPromise(params: MessageTypes['stellar.1.local.isAccountMobileOnlyLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.isAccountMobileOnlyLocal']['outParam']>

export declare function localLinkNewWalletAccountLocalRpcPromise(params: MessageTypes['stellar.1.local.linkNewWalletAccountLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.linkNewWalletAccountLocal']['outParam']>

export declare function localMakeRequestLocalRpcPromise(params: MessageTypes['stellar.1.local.makeRequestLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.makeRequestLocal']['outParam']>

export declare function localMarkAsReadLocalRpcPromise(params: MessageTypes['stellar.1.local.markAsReadLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.markAsReadLocal']['outParam']>

export declare function localReviewPaymentLocalRpcPromise(params: MessageTypes['stellar.1.local.reviewPaymentLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.reviewPaymentLocal']['outParam']>

export declare function localSendPaymentLocalRpcPromise(params: MessageTypes['stellar.1.local.sendPaymentLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.sendPaymentLocal']['outParam']>

export declare function localSetAccountAllDevicesLocalRpcPromise(params: MessageTypes['stellar.1.local.setAccountAllDevicesLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.setAccountAllDevicesLocal']['outParam']>

export declare function localSetAccountMobileOnlyLocalRpcPromise(params: MessageTypes['stellar.1.local.setAccountMobileOnlyLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.setAccountMobileOnlyLocal']['outParam']>

export declare function localSetInflationDestinationLocalRpcPromise(params: MessageTypes['stellar.1.local.setInflationDestinationLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.setInflationDestinationLocal']['outParam']>

export declare function localSetWalletAccountAsDefaultLocalRpcPromise(params: MessageTypes['stellar.1.local.setWalletAccountAsDefaultLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.setWalletAccountAsDefaultLocal']['outParam']>

export declare function localStartBuildPaymentLocalRpcPromise(params: MessageTypes['stellar.1.local.startBuildPaymentLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.startBuildPaymentLocal']['outParam']>

export declare function localStopBuildPaymentLocalRpcPromise(params: MessageTypes['stellar.1.local.stopBuildPaymentLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.stopBuildPaymentLocal']['outParam']>

export declare function localValidateAccountNameLocalRpcPromise(params: MessageTypes['stellar.1.local.validateAccountNameLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.validateAccountNameLocal']['outParam']>

export declare function localValidateSecretKeyLocalRpcPromise(params: MessageTypes['stellar.1.local.validateSecretKeyLocal']['inParam'], waitingKey?: WaitingKey): Promise<MessageTypes['stellar.1.local.validateSecretKeyLocal']['outParam']>
