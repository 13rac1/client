/* eslint-disable */

// This file is auto-generated by client/protocol/Makefile.
import { Effect } from 'redux-saga';
import * as Gregor1 from './rpc-gregor-gen'
import * as Keybase1 from './rpc-gen'
import * as Stellar1 from './rpc-stellar-gen'
export { Gregor1 };
export { Keybase1 };
export { Stellar1 };
export type Bool = boolean;
export type Boolean = boolean;
export type Bytes = Buffer;
export type Double = number;
export type Int = number;
export type Int64 = number;
export type Long = number;
export type String = string;
export type Uint = number;
export type Uint64 = number;
type WaitingKey = string | Array<string>;
export type IncomingErrorCallback = (
  arg0: {
    code?: number,
    desc?: string
  } | null
) => void;
type IncomingReturn = Effect | null | void | false | Array<Effect | null | void | false>;
type CallEffect<_,_a,_b> = any

export type MessageTypes = {
  'chat.1.NotifyChat.ChatAttachmentUploadProgress': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly outboxID: OutboxID,
      readonly bytesComplete: Long,
      readonly bytesTotal: Long
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatAttachmentUploadStart': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly outboxID: OutboxID
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatIdentifyUpdate': {
    inParam: {
      readonly update: Keybase1.CanonicalTLFNameAndIDWithBreaks
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatInboxStale': {
    inParam: {
      readonly uid: Keybase1.UID
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatInboxSyncStarted': {
    inParam: {
      readonly uid: Keybase1.UID
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatInboxSynced': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly syncRes: ChatSyncResult
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatJoinedConversation': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly conv?: InboxUIItem | null
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatKBFSToImpteamUpgrade': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatLeftConversation': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatPaymentInfo': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly msgID: MessageID,
      readonly info: UIPaymentInfo
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatPromptUnfurl': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly msgID: MessageID,
      readonly domain: String
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatRequestInfo': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly msgID: MessageID,
      readonly info: UIRequestInfo
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatResetConversation': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatSetConvRetention': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly conv?: InboxUIItem | null
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatSetConvSettings': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly conv?: InboxUIItem | null
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatSetTeamRetention': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly teamID: Keybase1.TeamID,
      readonly convs?: Array<InboxUIItem> | null
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatSubteamRename': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convs?: Array<InboxUIItem> | null
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatTLFFinalize': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly finalizeInfo: ConversationFinalizeInfo,
      readonly conv?: InboxUIItem | null
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatTLFResolve': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly convID: ConversationID,
      readonly resolveInfo: ConversationResolveInfo
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatThreadsStale': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly updates?: Array<ConversationStaleUpdate> | null
    },
    outParam: void
  },
  'chat.1.NotifyChat.ChatTypingUpdate': {
    inParam: {
      readonly typingUpdates?: Array<ConvTypingUpdate> | null
    },
    outParam: void
  },
  'chat.1.NotifyChat.NewChatActivity': {
    inParam: {
      readonly uid: Keybase1.UID,
      readonly activity: ChatActivity,
      readonly source: ChatActivitySource
    },
    outParam: void
  },
  'chat.1.chatUi.chatAttachmentDownloadDone': {
    inParam: void,
    outParam: void
  },
  'chat.1.chatUi.chatAttachmentDownloadProgress': {
    inParam: {
      readonly bytesComplete: Long,
      readonly bytesTotal: Long
    },
    outParam: void
  },
  'chat.1.chatUi.chatAttachmentDownloadStart': {
    inParam: void,
    outParam: void
  },
  'chat.1.chatUi.chatCoinFlipStatus': {
    inParam: {
      readonly statuses?: Array<UICoinFlipStatus> | null
    },
    outParam: void
  },
  'chat.1.chatUi.chatCommandMarkdown': {
    inParam: {
      readonly convID: String,
      readonly md?: UICommandMarkdown | null
    },
    outParam: void
  },
  'chat.1.chatUi.chatConfirmChannelDelete': {
    inParam: {
      readonly channel: String
    },
    outParam: Boolean
  },
  'chat.1.chatUi.chatGiphySearchResults': {
    inParam: {
      readonly convID: String,
      readonly results?: Array<GiphySearchResult> | null
    },
    outParam: void
  },
  'chat.1.chatUi.chatGiphyToggleResultWindow': {
    inParam: {
      readonly convID: String,
      readonly show: Boolean
    },
    outParam: void
  },
  'chat.1.chatUi.chatInboxConversation': {
    inParam: {
      readonly conv: String
    },
    outParam: void
  },
  'chat.1.chatUi.chatInboxFailed': {
    inParam: {
      readonly convID: ConversationID,
      readonly error: InboxUIItemError
    },
    outParam: void
  },
  'chat.1.chatUi.chatInboxUnverified': {
    inParam: {
      readonly inbox: String
    },
    outParam: void
  },
  'chat.1.chatUi.chatSearchDone': {
    inParam: {
      readonly numHits: Int
    },
    outParam: void
  },
  'chat.1.chatUi.chatSearchHit': {
    inParam: {
      readonly searchHit: ChatSearchHit
    },
    outParam: void
  },
  'chat.1.chatUi.chatSearchInboxDone': {
    inParam: {
      readonly res: ChatSearchInboxDone
    },
    outParam: void
  },
  'chat.1.chatUi.chatSearchInboxHit': {
    inParam: {
      readonly searchHit: ChatSearchInboxHit
    },
    outParam: void
  },
  'chat.1.chatUi.chatSearchIndexStatus': {
    inParam: {
      readonly status: ChatSearchIndexStatus
    },
    outParam: void
  },
  'chat.1.chatUi.chatShowManageChannels': {
    inParam: {
      readonly teamname: String
    },
    outParam: void
  },
  'chat.1.chatUi.chatStellarDataConfirm': {
    inParam: {
      readonly summary: UIChatPaymentSummary
    },
    outParam: Boolean
  },
  'chat.1.chatUi.chatStellarDataError': {
    inParam: {
      readonly error: Keybase1.Status
    },
    outParam: Boolean
  },
  'chat.1.chatUi.chatStellarDone': {
    inParam: {
      readonly canceled: Boolean
    },
    outParam: void
  },
  'chat.1.chatUi.chatStellarShowConfirm': {
    inParam: void,
    outParam: void
  },
  'chat.1.chatUi.chatThreadCached': {
    inParam: {
      readonly thread?: String | null
    },
    outParam: void
  },
  'chat.1.chatUi.chatThreadFull': {
    inParam: {
      readonly thread: String
    },
    outParam: void
  },
  'chat.1.local.CancelPost': {
    inParam: {
      readonly outboxID: OutboxID
    },
    outParam: void
  },
  'chat.1.local.DownloadFileAttachmentLocal': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly messageID: MessageID,
      readonly filename: String,
      readonly preview: Boolean,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: DownloadFileAttachmentLocalRes
  },
  'chat.1.local.RetryPost': {
    inParam: {
      readonly outboxID: OutboxID,
      readonly identifyBehavior?: Keybase1.TLFIdentifyBehavior | null
    },
    outParam: void
  },
  'chat.1.local.SetConversationStatusLocal': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly status: ConversationStatus,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: SetConversationStatusLocalRes
  },
  'chat.1.local.addTeamMemberAfterReset': {
    inParam: {
      readonly username: String,
      readonly convID: ConversationID
    },
    outParam: void
  },
  'chat.1.local.bulkAddToConv': {
    inParam: {
      readonly convID: ConversationID,
      readonly usernames?: Array<String> | null
    },
    outParam: void
  },
  'chat.1.local.deleteConversationLocal': {
    inParam: {
      readonly convID: ConversationID,
      readonly channelName: String,
      readonly confirmed: Boolean
    },
    outParam: DeleteConversationLocalRes
  },
  'chat.1.local.findConversationsLocal': {
    inParam: {
      readonly tlfName: String,
      readonly membersType: ConversationMembersType,
      readonly visibility: Keybase1.TLFVisibility,
      readonly topicType: TopicType,
      readonly topicName: String,
      readonly oneChatPerTLF?: Boolean | null,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: FindConversationsLocalRes
  },
  'chat.1.local.getGlobalAppNotificationSettingsLocal': {
    inParam: void,
    outParam: GlobalAppNotificationSettings
  },
  'chat.1.local.getInboxAndUnboxUILocal': {
    inParam: {
      readonly query?: GetInboxLocalQuery | null,
      readonly pagination?: Pagination | null,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: GetInboxAndUnboxUILocalRes
  },
  'chat.1.local.getInboxNonblockLocal': {
    inParam: {
      readonly maxUnbox?: Int | null,
      readonly skipUnverified: Boolean,
      readonly query?: GetInboxLocalQuery | null,
      readonly pagination?: Pagination | null,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: NonblockFetchRes
  },
  'chat.1.local.getNextAttachmentMessageLocal': {
    inParam: {
      readonly convID: ConversationID,
      readonly messageID: MessageID,
      readonly backInTime: Boolean,
      readonly assetTypes?: Array<AssetMetadataType> | null,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: GetNextAttachmentMessageLocalRes
  },
  'chat.1.local.getStaticConfig': {
    inParam: void,
    outParam: StaticConfig
  },
  'chat.1.local.getTLFConversationsLocal': {
    inParam: {
      readonly tlfName: String,
      readonly topicType: TopicType,
      readonly membersType: ConversationMembersType
    },
    outParam: GetTLFConversationsLocalRes
  },
  'chat.1.local.getTeamRetentionLocal': {
    inParam: {
      readonly teamID: Keybase1.TeamID
    },
    outParam: RetentionPolicy | null
  },
  'chat.1.local.getThreadLocal': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly reason: GetThreadReason,
      readonly query?: GetThreadQuery | null,
      readonly pagination?: Pagination | null,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: GetThreadLocalRes
  },
  'chat.1.local.getThreadNonblock': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly cbMode: GetThreadNonblockCbMode,
      readonly reason: GetThreadReason,
      readonly pgmode: GetThreadNonblockPgMode,
      readonly query?: GetThreadQuery | null,
      readonly pagination?: UIPagination | null,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: NonblockFetchRes
  },
  'chat.1.local.getUnfurlSettings': {
    inParam: void,
    outParam: UnfurlSettingsDisplay
  },
  'chat.1.local.getUnreadline': {
    inParam: {
      readonly convID: ConversationID,
      readonly readMsgID: MessageID,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: UnreadlineRes
  },
  'chat.1.local.getUploadTempFile': {
    inParam: {
      readonly outboxID: OutboxID,
      readonly filename: String
    },
    outParam: String
  },
  'chat.1.local.joinConversationByIDLocal': {
    inParam: {
      readonly convID: ConversationID
    },
    outParam: JoinLeaveConversationLocalRes
  },
  'chat.1.local.leaveConversationLocal': {
    inParam: {
      readonly convID: ConversationID
    },
    outParam: JoinLeaveConversationLocalRes
  },
  'chat.1.local.makePreview': {
    inParam: {
      readonly filename: String,
      readonly outboxID: OutboxID
    },
    outParam: MakePreviewRes
  },
  'chat.1.local.makeUploadTempFile': {
    inParam: {
      readonly outboxID: OutboxID,
      readonly filename: String,
      readonly data: Bytes
    },
    outParam: String
  },
  'chat.1.local.markAsReadLocal': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly msgID: MessageID
    },
    outParam: MarkAsReadLocalRes
  },
  'chat.1.local.newConversationLocal': {
    inParam: {
      readonly tlfName: String,
      readonly topicType: TopicType,
      readonly tlfVisibility: Keybase1.TLFVisibility,
      readonly topicName?: String | null,
      readonly membersType: ConversationMembersType,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: NewConversationLocalRes
  },
  'chat.1.local.postDeleteHistoryByAge': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly tlfName: String,
      readonly tlfPublic: Boolean,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior,
      readonly age: Gregor1.DurationSec
    },
    outParam: PostLocalRes
  },
  'chat.1.local.postDeleteNonblock': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly tlfName: String,
      readonly tlfPublic: Boolean,
      readonly supersedes: MessageID,
      readonly clientPrev: MessageID,
      readonly outboxID?: OutboxID | null,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: PostLocalNonblockRes
  },
  'chat.1.local.postEditNonblock': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly tlfName: String,
      readonly tlfPublic: Boolean,
      readonly target: EditTarget,
      readonly body: String,
      readonly outboxID?: OutboxID | null,
      readonly clientPrev: MessageID,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: PostLocalNonblockRes
  },
  'chat.1.local.postFileAttachmentLocalNonblock': {
    inParam: {
      readonly arg: PostFileAttachmentArg,
      readonly clientPrev: MessageID
    },
    outParam: PostLocalNonblockRes
  },
  'chat.1.local.postHeadline': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly tlfName: String,
      readonly tlfPublic: Boolean,
      readonly headline: String,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: PostLocalRes
  },
  'chat.1.local.postHeadlineNonblock': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly tlfName: String,
      readonly tlfPublic: Boolean,
      readonly headline: String,
      readonly outboxID?: OutboxID | null,
      readonly clientPrev: MessageID,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: PostLocalNonblockRes
  },
  'chat.1.local.postMetadata': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly tlfName: String,
      readonly tlfPublic: Boolean,
      readonly channelName: String,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: PostLocalRes
  },
  'chat.1.local.postReactionNonblock': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly tlfName: String,
      readonly tlfPublic: Boolean,
      readonly supersedes: MessageID,
      readonly body: String,
      readonly outboxID?: OutboxID | null,
      readonly clientPrev: MessageID,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: PostLocalNonblockRes
  },
  'chat.1.local.postTextNonblock': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly tlfName: String,
      readonly tlfPublic: Boolean,
      readonly body: String,
      readonly clientPrev: MessageID,
      readonly outboxID?: OutboxID | null,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior,
      readonly ephemeralLifetime?: Gregor1.DurationSec | null
    },
    outParam: PostLocalNonblockRes
  },
  'chat.1.local.previewConversationByIDLocal': {
    inParam: {
      readonly convID: ConversationID
    },
    outParam: JoinLeaveConversationLocalRes
  },
  'chat.1.local.profileChatSearch': {
    inParam: {
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: {
      [K in string]: ProfileSearchConvStats;
    }
  },
  'chat.1.local.resolveUnfurlPrompt': {
    inParam: {
      readonly convID: ConversationID,
      readonly msgID: MessageID,
      readonly result: UnfurlPromptResult,
      readonly identifyBehavior: Keybase1.TLFIdentifyBehavior
    },
    outParam: void
  },
  'chat.1.local.saveUnfurlSettings': {
    inParam: {
      readonly mode: UnfurlMode,
      readonly whitelist?: Array<String> | null
    },
    outParam: void
  },
  'chat.1.local.setAppNotificationSettingsLocal': {
    inParam: {
      readonly convID: ConversationID,
      readonly channelWide: Boolean,
      readonly settings?: Array<AppNotificationSettingLocal> | null
    },
    outParam: SetAppNotificationSettingsLocalRes
  },
  'chat.1.local.setConvMinWriterRoleLocal': {
    inParam: {
      readonly convID: ConversationID,
      readonly role: Keybase1.TeamRole
    },
    outParam: void
  },
  'chat.1.local.setConvRetentionLocal': {
    inParam: {
      readonly convID: ConversationID,
      readonly policy: RetentionPolicy
    },
    outParam: void
  },
  'chat.1.local.setGlobalAppNotificationSettingsLocal': {
    inParam: {
      readonly settings: {
        [K in string]: Bool;
      }
    },
    outParam: void
  },
  'chat.1.local.setTeamRetentionLocal': {
    inParam: {
      readonly teamID: Keybase1.TeamID,
      readonly policy: RetentionPolicy
    },
    outParam: void
  },
  'chat.1.local.toggleMessageCollapse': {
    inParam: {
      readonly convID: ConversationID,
      readonly msgID: MessageID,
      readonly collapse: Boolean
    },
    outParam: void
  },
  'chat.1.local.unboxMobilePushNotification': {
    inParam: {
      readonly payload: String,
      readonly convID: String,
      readonly membersType: ConversationMembersType,
      readonly pushIDs?: Array<String> | null,
      readonly shouldAck: Boolean
    },
    outParam: String
  },
  'chat.1.local.updateTyping': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly typing: Boolean
    },
    outParam: void
  },
  'chat.1.local.updateUnsentText': {
    inParam: {
      readonly conversationID: ConversationID,
      readonly text: String
    },
    outParam: void
  }
};

export const chatUiMessageUnboxedState: {
  valid: 1,
  error: 2,
  outbox: 3,
  placeholder: 4,
}

export const chatUiUICoinFlipErrorTyp: {
  generic: 0,
  absentee: 1,
  timeout: 2,
  aborted: 3,
  dupreg: 4,
  dupcommitcomplete: 5,
  dupreveal: 6,
  commitmismatch: 7,
}

export const chatUiUICoinFlipPhase: {
  commitment: 0,
  reveals: 1,
  complete: 2,
  error: 3,
}

export const chatUiUICoinFlipResultTyp: {
  number: 0,
  shuffle: 1,
  deck: 2,
  hands: 3,
  coin: 4,
}

export const chatUiUITextDecorationTyp: {
  payment: 0,
  atmention: 1,
  channelnamemention: 2,
}

export const commandsConversationBuiltinCommandTyp: {
  none: 0,
  adhoc: 1,
  smallteam: 2,
  bigteam: 3,
  bigteamgeneral: 4,
}

export const commandsConversationCommandGroupsTyp: {
  builtin: 0,
  custom: 1,
}

export const commonAssetMetadataType: {
  none: 0,
  image: 1,
  video: 2,
  audio: 3,
}

export const commonAssetTag: {
  primary: 0,
}

export const commonConversationExistence: {
  active: 0,
  archived: 1,
  deleted: 2,
  abandoned: 3,
}

export const commonConversationMemberStatus: {
  active: 0,
  removed: 1,
  left: 2,
  preview: 3,
  reset: 4,
  neverJoined: 5,
}

export const commonConversationMembersType: {
  kbfs: 0,
  team: 1,
  impteamnative: 2,
  impteamupgrade: 3,
}

export const commonConversationStatus: {
  unfiled: 0,
  favorite: 1,
  ignored: 2,
  blocked: 3,
  muted: 4,
  reported: 5,
}

export const commonGetThreadReason: {
  general: 0,
  push: 1,
  foreground: 2,
  backgroundconvload: 3,
  fixretry: 4,
  prepare: 5,
  searcher: 6,
  indexedSearch: 7,
  kbfsfileactivity: 8,
  coinflip: 9,
}

export const commonGlobalAppNotificationSetting: {
  newmessages: 0,
  plaintextmobile: 1,
  plaintextdesktop: 2,
  defaultsoundmobile: 3,
  disabletyping: 4,
}

export const commonInboxResType: {
  versionhit: 0,
  full: 1,
}

export const commonMessageType: {
  none: 0,
  text: 1,
  attachment: 2,
  edit: 3,
  delete: 4,
  metadata: 5,
  tlfname: 6,
  headline: 7,
  attachmentuploaded: 8,
  join: 9,
  leave: 10,
  system: 11,
  deletehistory: 12,
  reaction: 13,
  sendpayment: 14,
  requestpayment: 15,
  unfurl: 16,
  flip: 17,
}

export const commonNotificationKind: {
  generic: 0,
  atmention: 1,
}

export const commonRetentionPolicyType: {
  none: 0,
  retain: 1,
  expire: 2,
  inherit: 3,
  ephemeral: 4,
}

export const commonSyncInboxResType: {
  current: 0,
  incremental: 1,
  clear: 2,
}

export const commonTeamType: {
  none: 0,
  simple: 1,
  complex: 2,
}

export const commonTopicType: {
  none: 0,
  chat: 1,
  dev: 2,
  kbfsfileedit: 3,
}

export const localBodyPlaintextVersion: {
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
  v7: 7,
  v8: 8,
  v9: 9,
  v10: 10,
}

export const localConversationErrorType: {
  permanent: 0,
  missinginfo: 1,
  selfrekeyneeded: 2,
  otherrekeyneeded: 3,
  identify: 4,
  transient: 5,
  none: 6,
}

export const localGetThreadNonblockCbMode: {
  full: 0,
  incremental: 1,
}

export const localGetThreadNonblockPgMode: {
  default: 0,
  server: 1,
}

export const localHeaderPlaintextVersion: {
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
  v5: 5,
  v6: 6,
  v7: 7,
  v8: 8,
  v9: 9,
  v10: 10,
}

export const localMessageSystemType: {
  addedtoteam: 0,
  inviteaddedtoteam: 1,
  complexteam: 2,
  createteam: 3,
  gitpush: 4,
  changeavatar: 5,
  changeretention: 6,
  bulkaddtoconv: 7,
}

export const localMessageUnboxedErrorType: {
  misc: 0,
  badversionCritical: 1,
  badversion: 2,
  identify: 3,
  ephemeral: 4,
  pairwiseMissing: 5,
}

export const localOutboxErrorType: {
  misc: 0,
  offline: 1,
  identify: 2,
  toolong: 3,
  duplicate: 4,
  expired: 5,
  toomanyattempts: 6,
  alreadyDeleted: 7,
  uploadfailed: 8,
}

export const localOutboxStateType: {
  sending: 0,
  error: 1,
}

export const localPreviewLocationTyp: {
  url: 0,
  file: 1,
  bytes: 2,
}

export const localTextPaymentResultTyp: {
  sent: 0,
  error: 1,
}

export const localUnfurlPromptAction: {
  always: 0,
  never: 1,
  accept: 2,
  notnow: 3,
  onetime: 4,
}

export const notifyChatChatActivitySource: {
  local: 0,
  remote: 1,
}

export const notifyChatChatActivityType: {
  reserved: 0,
  incomingMessage: 1,
  readMessage: 2,
  newConversation: 3,
  setStatus: 4,
  failedMessage: 5,
  membersUpdate: 6,
  setAppNotificationSettings: 7,
  teamtype: 8,
  expunge: 9,
  ephemeralPurge: 10,
  reactionUpdate: 11,
  messagesUpdated: 12,
}

export const notifyChatStaleUpdateType: {
  clear: 0,
  newactivity: 1,
  convupdate: 2,
}

export const remoteChannelMention: {
  none: 0,
  all: 1,
  here: 2,
}

export const remoteMessageBoxedVersion: {
  vnone: 0,
  v1: 1,
  v2: 2,
  v3: 3,
  v4: 4,
}

export const remoteSyncAllNotificationType: {
  state: 0,
  incremental: 1,
}

export const remoteSyncAllProtVers: {
  v0: 0,
  v1: 1,
}

export const unfurlUnfurlMode: {
  always: 0,
  never: 1,
  whitelisted: 2,
}

export const unfurlUnfurlType: {
  generic: 0,
  youtube: 1,
  giphy: 2,
}
export type AppNotificationSettingLocal = {
  readonly deviceType: Keybase1.DeviceType,
  readonly kind: NotificationKind,
  readonly enabled: Boolean
};
export type Asset = {
  readonly filename: String,
  readonly region: String,
  readonly endpoint: String,
  readonly bucket: String,
  readonly path: String,
  readonly size: Long,
  readonly mimeType: String,
  readonly encHash: Hash,
  readonly key: Bytes,
  readonly verifyKey: Bytes,
  readonly title: String,
  readonly nonce: Bytes,
  readonly metadata: AssetMetadata,
  readonly tag: AssetTag
};
export type AssetMetadata = {
  assetType: 1,
  image: AssetMetadataImage | null
} | {
  assetType: 2,
  video: AssetMetadataVideo | null
} | {
  assetType: 3,
  audio: AssetMetadataAudio | null
};
export type AssetMetadataAudio = {
  readonly durationMs: Int
};
export type AssetMetadataImage = {
  readonly width: Int,
  readonly height: Int
};
export type AssetMetadataType = 0 | 1 | 2 | 3; // AUDIO_3

export type AssetMetadataVideo = {
  readonly width: Int,
  readonly height: Int,
  readonly durationMs: Int
};
export type AssetTag = 0; // PRIMARY_0

export type BodyPlaintext = {
  version: 1,
  v1: BodyPlaintextV1 | null
} | {
  version: 2,
  v2: BodyPlaintextUnsupported | null
} | {
  version: 3,
  v3: BodyPlaintextUnsupported | null
} | {
  version: 4,
  v4: BodyPlaintextUnsupported | null
} | {
  version: 5,
  v5: BodyPlaintextUnsupported | null
} | {
  version: 6,
  v6: BodyPlaintextUnsupported | null
} | {
  version: 7,
  v7: BodyPlaintextUnsupported | null
} | {
  version: 8,
  v8: BodyPlaintextUnsupported | null
} | {
  version: 9,
  v9: BodyPlaintextUnsupported | null
} | {
  version: 10,
  v10: BodyPlaintextUnsupported | null
};
export type BodyPlaintextMetaInfo = {
  readonly crit: Boolean
};
export type BodyPlaintextUnsupported = {
  readonly mi: BodyPlaintextMetaInfo
};
export type BodyPlaintextV1 = {
  readonly messageBody: MessageBody
};
export type BodyPlaintextVersion = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10; // V10_10

export type BuiltinCommandGroup = {
  readonly typ: ConversationBuiltinCommandTyp,
  readonly commands?: Array<ConversationCommand> | null
};
export type ChannelMention = 0 | 1 | 2; // HERE_2

export type ChannelNameMention = {
  readonly convID: ConversationID,
  readonly topicName: String
};
export type ChatActivity = {
  activityType: 1,
  incomingMessage: IncomingMessage | null
} | {
  activityType: 2,
  readMessage: ReadMessageInfo | null
} | {
  activityType: 3,
  newConversation: NewConversationInfo | null
} | {
  activityType: 4,
  setStatus: SetStatusInfo | null
} | {
  activityType: 5,
  failedMessage: FailedMessageInfo | null
} | {
  activityType: 6,
  membersUpdate: MembersUpdateInfo | null
} | {
  activityType: 7,
  setAppNotificationSettings: SetAppNotificationSettingsInfo | null
} | {
  activityType: 8,
  teamtype: TeamTypeInfo | null
} | {
  activityType: 9,
  expunge: ExpungeInfo | null
} | {
  activityType: 10,
  ephemeralPurge: EphemeralPurgeNotifInfo | null
} | {
  activityType: 11,
  reactionUpdate: ReactionUpdateNotif | null
} | {
  activityType: 12,
  messagesUpdated: MessagesUpdated | null
};
export type ChatActivitySource = 0 | 1; // REMOTE_1

export type ChatActivityType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12; // MESSAGES_UPDATED_12

export type ChatSearchHit = {
  readonly beforeMessages?: Array<UIMessage> | null,
  readonly hitMessage: UIMessage,
  readonly afterMessages?: Array<UIMessage> | null,
  readonly matches?: Array<ChatSearchMatch> | null
};
export type ChatSearchInboxDone = {
  readonly numHits: Int,
  readonly numConvs: Int,
  readonly percentIndexed: Int
};
export type ChatSearchInboxHit = {
  readonly convID: ConversationID,
  readonly convName: String,
  readonly hits?: Array<ChatSearchHit> | null
};
export type ChatSearchInboxResults = {
  readonly hits?: Array<ChatSearchInboxHit> | null,
  readonly percentIndexed: Int
};
export type ChatSearchIndexStatus = {
  readonly percentIndexed: Int
};
export type ChatSearchMatch = {
  readonly startIndex: Int,
  readonly endIndex: Int,
  readonly match: String
};
export type ChatSyncIncrementalConv = {
  readonly conv: UnverifiedInboxUIItem,
  readonly shouldUnbox: Boolean
};
export type ChatSyncIncrementalInfo = {
  readonly items?: Array<ChatSyncIncrementalConv> | null
};
export type ChatSyncResult = {
  syncType: 0
} | {
  syncType: 2
} | {
  syncType: 1,
  incremental: ChatSyncIncrementalInfo | null
};
export type ConvTypingUpdate = {
  readonly convID: ConversationID,
  readonly typers?: Array<TyperInfo> | null
};
export type Conversation = {
  readonly metadata: ConversationMetadata,
  readonly readerInfo?: ConversationReaderInfo | null,
  readonly notifications?: ConversationNotificationInfo | null,
  readonly maxMsgs?: Array<MessageBoxed> | null,
  readonly maxMsgSummaries?: Array<MessageSummary> | null,
  readonly creatorInfo?: ConversationCreatorInfo | null,
  readonly expunge: Expunge,
  readonly convRetention?: RetentionPolicy | null,
  readonly teamRetention?: RetentionPolicy | null,
  readonly cs /* convSettings */?: ConversationSettings | null
};
export type ConversationBuiltinCommandTyp = 0 | 1 | 2 | 3 | 4; // BIGTEAMGENERAL_4

export type ConversationCommand = {
  readonly description: String,
  readonly name: String,
  readonly usage: String,
  readonly hasHelpText: Boolean,
  readonly username?: String | null
};
export type ConversationCommandGroups = {
  typ: 0,
  builtin: ConversationBuiltinCommandTyp | null
} | {
  typ: 1,
  custom: ConversationCommandGroupsCustom | null
};
export type ConversationCommandGroupsCustom = {
  readonly commands?: Array<ConversationCommand> | null
};
export type ConversationCommandGroupsTyp = 0 | 1; // CUSTOM_1

export type ConversationCreatorInfo = {
  readonly ctime: Gregor1.Time,
  readonly uid: Gregor1.UID
};
export type ConversationCreatorInfoLocal = {
  readonly ctime: Gregor1.Time,
  readonly username: String
};
export type ConversationErrorLocal = {
  readonly typ: ConversationErrorType,
  readonly message: String,
  readonly remoteConv: Conversation,
  readonly unverifiedTLFName: String,
  readonly rekeyInfo?: ConversationErrorRekey | null
};
export type ConversationErrorRekey = {
  readonly tlfName: String,
  readonly tlfPublic: Boolean,
  readonly rekeyers?: Array<String> | null,
  readonly writerNames?: Array<String> | null,
  readonly readerNames?: Array<String> | null
};
export type ConversationErrorType = 0 | 1 | 2 | 3 | 4 | 5 | 6; // NONE_6

export type ConversationExistence = 0 | 1 | 2 | 3; // ABANDONED_3

export type ConversationFinalizeInfo = {
  readonly resetUser: String,
  readonly resetDate: String,
  readonly resetFull: String,
  readonly resetTimestamp: Gregor1.Time
};
export type ConversationID = Bytes;
export type ConversationIDMessageIDPair = {
  readonly convID: ConversationID,
  readonly msgID: MessageID
};
export type ConversationIDMessageIDPairs = {
  readonly pairs?: Array<ConversationIDMessageIDPair> | null
};
export type ConversationIDTriple = {
  readonly tlfid: TLFID,
  readonly topicType: TopicType,
  readonly topicID: TopicID
};
export type ConversationIndex = {
  readonly i /* index */: {
    [K in string]: {
      [K in string]: Boolean;
    };
  },
  readonly m /* metadata */: ConversationIndexMetadata
};
export type ConversationIndexMetadata = {
  readonly s /* seenIDs */: {
    [K in string]: Boolean;
  },
  readonly v /* version */: Int
};
export type ConversationInfoLocal = {
  readonly id: ConversationID,
  readonly triple: ConversationIDTriple,
  readonly tlfName: String,
  readonly topicName: String,
  readonly headline: String,
  readonly snippetMsg?: MessageUnboxed | null,
  readonly visibility: Keybase1.TLFVisibility,
  readonly status: ConversationStatus,
  readonly membersType: ConversationMembersType,
  readonly memberStatus: ConversationMemberStatus,
  readonly teamType: TeamType,
  readonly existence: ConversationExistence,
  readonly version: ConversationVers,
  readonly localVersion: LocalConversationVers,
  readonly participants?: Array<ConversationLocalParticipant> | null,
  readonly finalizeInfo?: ConversationFinalizeInfo | null,
  readonly resetNames?: Array<String> | null
};
export type ConversationLocal = {
  readonly error?: ConversationErrorLocal | null,
  readonly info: ConversationInfoLocal,
  readonly readerInfo: ConversationReaderInfo,
  readonly creatorInfo?: ConversationCreatorInfoLocal | null,
  readonly notifications?: ConversationNotificationInfo | null,
  readonly supersedes?: Array<ConversationMetadata> | null,
  readonly supersededBy?: Array<ConversationMetadata> | null,
  readonly maxMessages?: Array<MessageSummary> | null,
  readonly isEmpty: Boolean,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null,
  readonly expunge: Expunge,
  readonly convRetention?: RetentionPolicy | null,
  readonly teamRetention?: RetentionPolicy | null,
  readonly convSettings?: ConversationSettingsLocal | null,
  readonly commands: ConversationCommandGroups
};
export type ConversationLocalParticipant = {
  readonly username: String,
  readonly fullname?: String | null
};
export type ConversationMember = {
  readonly uid: Gregor1.UID,
  readonly convID: ConversationID,
  readonly topicType: TopicType
};
export type ConversationMemberStatus = 0 | 1 | 2 | 3 | 4 | 5; // NEVER_JOINED_5

export type ConversationMembersType = 0 | 1 | 2 | 3; // IMPTEAMUPGRADE_3

export type ConversationMetadata = {
  readonly idTriple: ConversationIDTriple,
  readonly conversationID: ConversationID,
  readonly visibility: Keybase1.TLFVisibility,
  readonly status: ConversationStatus,
  readonly membersType: ConversationMembersType,
  readonly teamType: TeamType,
  readonly existence: ConversationExistence,
  readonly version: ConversationVers,
  readonly localVersion: LocalConversationVers,
  readonly finalizeInfo?: ConversationFinalizeInfo | null,
  readonly supersedes?: Array<ConversationMetadata> | null,
  readonly supersededBy?: Array<ConversationMetadata> | null,
  readonly activeList?: Array<Gregor1.UID> | null,
  readonly allList?: Array<Gregor1.UID> | null,
  readonly resetList?: Array<Gregor1.UID> | null
};
export type ConversationMinWriterRoleInfo = {
  readonly uid: Gregor1.UID,
  readonly role: Keybase1.TeamRole
};
export type ConversationMinWriterRoleInfoLocal = {
  readonly username: String,
  readonly role: Keybase1.TeamRole
};
export type ConversationNotificationInfo = {
  readonly channelWide: Boolean,
  readonly settings: {
    [K in string]: {
      [K in string]: Boolean;
    };
  }
};
export type ConversationReaderInfo = {
  readonly mtime: Gregor1.Time,
  readonly readMsgid: MessageID,
  readonly maxMsgid: MessageID,
  readonly status: ConversationMemberStatus
};
export type ConversationResolveInfo = {
  readonly newTLFName: String
};
export type ConversationSettings = {
  readonly mwr /* minWriterRoleInfo */?: ConversationMinWriterRoleInfo | null
};
export type ConversationSettingsLocal = {
  readonly minWriterRoleInfo?: ConversationMinWriterRoleInfoLocal | null
};
export type ConversationStaleUpdate = {
  readonly convID: ConversationID,
  readonly updateType: StaleUpdateType
};
export type ConversationStatus = 0 | 1 | 2 | 3 | 4 | 5; // REPORTED_5

export type ConversationUpdate = {
  readonly convID: ConversationID,
  readonly existence: ConversationExistence
};
export type ConversationVers = Uint64;
export type DeleteConversationLocalRes = {
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null
};
export type DeleteConversationRemoteRes = {
  readonly rateLimit?: RateLimit | null
};
export type DownloadAttachmentLocalRes = {
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type DownloadFileAttachmentLocalRes = {
  readonly filename: String,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type EditTarget = {
  readonly messageID?: MessageID | null,
  readonly outboxID?: OutboxID | null
};
export type EncryptedData = {
  readonly v: Int,
  readonly e: Bytes,
  readonly n: Bytes
};
export type EphemeralPurgeInfo = {
  readonly c /* convID */: ConversationID,
  readonly a /* isActive */: Boolean,
  readonly n /* nextPurgeTime */: Gregor1.Time,
  readonly e /* minUnexplodedID */: MessageID
};
export type EphemeralPurgeNotifInfo = {
  readonly convID: ConversationID,
  readonly msgs?: Array<UIMessage> | null
};
export type Expunge = {
  readonly upto: MessageID,
  readonly basis: MessageID
};
export type ExpungeInfo = {
  readonly convID: ConversationID,
  readonly expunge: Expunge,
  readonly conv?: InboxUIItem | null
};
export type ExpungePayload = {
  readonly Action: String,
  readonly convID: ConversationID,
  readonly inboxVers: InboxVers,
  readonly expunge: Expunge,
  readonly maxMsgs?: Array<MessageSummary> | null,
  readonly topicType: TopicType,
  readonly unreadUpdate?: UnreadUpdate | null
};
export type FailedMessageInfo = {
  readonly outboxRecords?: Array<OutboxRecord> | null,
  readonly isEphemeralPurge: Boolean
};
export type FindConversationsLocalRes = {
  readonly conversations?: Array<ConversationLocal> | null,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type FlipGameID = Bytes;
export type GenericPayload = {
  readonly Action: String,
  readonly inboxVers: InboxVers,
  readonly convID: ConversationID,
  readonly topicType: TopicType,
  readonly unreadUpdate?: UnreadUpdate | null
};
export type GetConversationForCLILocalQuery = {
  readonly markAsRead: Boolean,
  readonly MessageTypes?: Array<MessageType> | null,
  readonly Since?: String | null,
  readonly limit: UnreadFirstNumLimit,
  readonly conv: ConversationLocal
};
export type GetConversationForCLILocalRes = {
  readonly conversation: ConversationLocal,
  readonly messages?: Array<MessageUnboxed> | null,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null
};
export type GetConversationMetadataRemoteRes = {
  readonly conv: Conversation,
  readonly rateLimit?: RateLimit | null
};
export type GetInboxAndUnboxLocalRes = {
  readonly conversations?: Array<ConversationLocal> | null,
  readonly pagination?: Pagination | null,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type GetInboxAndUnboxUILocalRes = {
  readonly conversations?: Array<InboxUIItem> | null,
  readonly pagination?: Pagination | null,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type GetInboxByTLFIDRemoteRes = {
  readonly convs?: Array<Conversation> | null,
  readonly rateLimit?: RateLimit | null
};
export type GetInboxLocalQuery = {
  readonly name?: NameQuery | null,
  readonly topicName?: String | null,
  readonly convIDs?: Array<ConversationID> | null,
  readonly topicType?: TopicType | null,
  readonly tlfVisibility?: Keybase1.TLFVisibility | null,
  readonly before?: Gregor1.Time | null,
  readonly after?: Gregor1.Time | null,
  readonly oneChatTypePerTLF?: Boolean | null,
  readonly status?: Array<ConversationStatus> | null,
  readonly memberStatus?: Array<ConversationMemberStatus> | null,
  readonly unreadOnly: Boolean,
  readonly readOnly: Boolean,
  readonly computeActiveList: Boolean
};
export type GetInboxQuery = {
  readonly convID?: ConversationID | null,
  readonly topicType?: TopicType | null,
  readonly tlfID?: TLFID | null,
  readonly tlfVisibility?: Keybase1.TLFVisibility | null,
  readonly before?: Gregor1.Time | null,
  readonly after?: Gregor1.Time | null,
  readonly oneChatTypePerTLF?: Boolean | null,
  readonly status?: Array<ConversationStatus> | null,
  readonly memberStatus?: Array<ConversationMemberStatus> | null,
  readonly existences?: Array<ConversationExistence> | null,
  readonly membersTypes?: Array<ConversationMembersType> | null,
  readonly convIDs?: Array<ConversationID> | null,
  readonly unreadOnly: Boolean,
  readonly readOnly: Boolean,
  readonly computeActiveList: Boolean,
  readonly summarizeMaxMsgs: Boolean,
  readonly skipBgLoads: Boolean
};
export type GetInboxRemoteRes = {
  readonly inbox: InboxView,
  readonly rateLimit?: RateLimit | null
};
export type GetInboxSummaryForCLILocalQuery = {
  readonly topicType: TopicType,
  readonly after: String,
  readonly before: String,
  readonly visibility: Keybase1.TLFVisibility,
  readonly status?: Array<ConversationStatus> | null,
  readonly unreadFirst: Boolean,
  readonly unreadFirstLimit: UnreadFirstNumLimit,
  readonly activitySortedLimit: Int
};
export type GetInboxSummaryForCLILocalRes = {
  readonly conversations?: Array<ConversationLocal> | null,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null
};
export type GetInboxUILocalRes = {
  readonly conversationsRemote?: Array<UnverifiedInboxUIItem> | null,
  readonly pagination?: Pagination | null,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type GetMessageBeforeRes = {
  readonly msgID: MessageID,
  readonly rateLimit?: RateLimit | null
};
export type GetMessagesLocalRes = {
  readonly messages?: Array<MessageUnboxed> | null,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type GetMessagesRemoteRes = {
  readonly msgs?: Array<MessageBoxed> | null,
  readonly rateLimit?: RateLimit | null
};
export type GetNextAttachmentMessageLocalRes = {
  readonly message?: UIMessage | null,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type GetPublicConversationsRes = {
  readonly conversations?: Array<Conversation> | null,
  readonly rateLimit?: RateLimit | null
};
export type GetTLFConversationsLocalRes = {
  readonly convs?: Array<InboxUIItem> | null,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null
};
export type GetTLFConversationsRes = {
  readonly conversations?: Array<Conversation> | null,
  readonly rateLimit?: RateLimit | null
};
export type GetThreadLocalRes = {
  readonly thread: ThreadView,
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type GetThreadNonblockCbMode = 0 | 1; // INCREMENTAL_1

export type GetThreadNonblockPgMode = 0 | 1; // SERVER_1

export type GetThreadQuery = {
  readonly markAsRead: Boolean,
  readonly messageTypes?: Array<MessageType> | null,
  readonly disableResolveSupersedes: Boolean,
  readonly enableDeletePlaceholders: Boolean,
  readonly disablePostProcessThread: Boolean,
  readonly before?: Gregor1.Time | null,
  readonly after?: Gregor1.Time | null,
  readonly messageIDControl?: MessageIDControl | null
};
export type GetThreadReason = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9; // COINFLIP_9

export type GetThreadRemoteRes = {
  readonly thread: ThreadViewBoxed,
  readonly membersType: ConversationMembersType,
  readonly visibility: Keybase1.TLFVisibility,
  readonly rateLimit?: RateLimit | null
};
export type GetUnreadlineRemoteRes = {
  readonly unreadlineID?: MessageID | null,
  readonly rateLimit?: RateLimit | null
};
export type GiphySearchResult = {
  readonly targetUrl: String,
  readonly previewUrl: String,
  readonly previewWidth: Int,
  readonly previewHeight: Int,
  readonly previewIsVideo: Boolean
};
export type GlobalAppNotificationSetting = 0 | 1 | 2 | 3 | 4; // DISABLETYPING_4

export type GlobalAppNotificationSettings = {
  readonly settings: {
    [K in string]: Bool;
  }
};
export type Hash = Bytes;
export type HeaderPlaintext = {
  version: 1,
  v1: HeaderPlaintextV1 | null
} | {
  version: 2,
  v2: HeaderPlaintextUnsupported | null
} | {
  version: 3,
  v3: HeaderPlaintextUnsupported | null
} | {
  version: 4,
  v4: HeaderPlaintextUnsupported | null
} | {
  version: 5,
  v5: HeaderPlaintextUnsupported | null
} | {
  version: 6,
  v6: HeaderPlaintextUnsupported | null
} | {
  version: 7,
  v7: HeaderPlaintextUnsupported | null
} | {
  version: 8,
  v8: HeaderPlaintextUnsupported | null
} | {
  version: 9,
  v9: HeaderPlaintextUnsupported | null
} | {
  version: 10,
  v10: HeaderPlaintextUnsupported | null
};
export type HeaderPlaintextMetaInfo = {
  readonly crit: Boolean
};
export type HeaderPlaintextUnsupported = {
  readonly mi: HeaderPlaintextMetaInfo
};
export type HeaderPlaintextV1 = {
  readonly conv: ConversationIDTriple,
  readonly tlfName: String,
  readonly tlfPublic: Boolean,
  readonly messageType: MessageType,
  readonly prev?: Array<MessagePreviousPointer> | null,
  readonly sender: Gregor1.UID,
  readonly senderDevice: Gregor1.DeviceID,
  readonly kbfsCryptKeysUsed?: Boolean | null,
  readonly bodyHash: Hash,
  readonly outboxInfo?: OutboxInfo | null,
  readonly outboxID?: OutboxID | null,
  readonly headerSignature?: SignatureInfo | null,
  readonly merkleRoot?: MerkleRoot | null,
  readonly em /* ephemeralMetadata */?: MsgEphemeralMetadata | null
};
export type HeaderPlaintextVersion = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10; // V10_10

export type InboxResType = 0 | 1; // FULL_1

export type InboxUIItem = {
  readonly convID: String,
  readonly topicType: TopicType,
  readonly isPublic: Boolean,
  readonly isEmpty: Boolean,
  readonly name: String,
  readonly snippet: String,
  readonly snippetDecoration: String,
  readonly channel: String,
  readonly headline: String,
  readonly visibility: Keybase1.TLFVisibility,
  readonly participants?: Array<String> | null,
  readonly fullNames: {
    [K in string]: String;
  },
  readonly resetParticipants?: Array<String> | null,
  readonly status: ConversationStatus,
  readonly membersType: ConversationMembersType,
  readonly memberStatus: ConversationMemberStatus,
  readonly teamType: TeamType,
  readonly time: Gregor1.Time,
  readonly notifications?: ConversationNotificationInfo | null,
  readonly creatorInfo?: ConversationCreatorInfoLocal | null,
  readonly version: ConversationVers,
  readonly localVersion: LocalConversationVers,
  readonly maxMsgID: MessageID,
  readonly maxVisibleMsgID: MessageID,
  readonly readMsgID: MessageID,
  readonly convRetention?: RetentionPolicy | null,
  readonly teamRetention?: RetentionPolicy | null,
  readonly convSettings?: ConversationSettingsLocal | null,
  readonly finalizeInfo?: ConversationFinalizeInfo | null,
  readonly supersedes?: Array<ConversationMetadata> | null,
  readonly supersededBy?: Array<ConversationMetadata> | null,
  readonly commands: ConversationCommandGroups
};
export type InboxUIItemError = {
  readonly typ: ConversationErrorType,
  readonly message: String,
  readonly unverifiedTLFName: String,
  readonly rekeyInfo?: ConversationErrorRekey | null,
  readonly remoteConv: UnverifiedInboxUIItem
};
export type InboxUIItems = {
  readonly items?: Array<InboxUIItem> | null,
  readonly pagination?: UIPagination | null,
  readonly offline: Boolean
};
export type InboxVers = Uint64;
export type InboxVersInfo = {
  readonly uid: Gregor1.UID,
  readonly vers: InboxVers
};
export type InboxView = {
  rtype: 0
} | {
  rtype: 1,
  full: InboxViewFull | null
};
export type InboxViewFull = {
  readonly vers: InboxVers,
  readonly conversations?: Array<Conversation> | null,
  readonly pagination?: Pagination | null
};
export type IncomingMessage = {
  readonly message: UIMessage,
  readonly modifiedMessage?: UIMessage | null,
  readonly convID: ConversationID,
  readonly displayDesktopNotification: Boolean,
  readonly desktopNotificationSnippet: String,
  readonly conv?: InboxUIItem | null,
  readonly pagination?: UIPagination | null
};
export type JoinLeaveConversationLocalRes = {
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null
};
export type JoinLeaveConversationRemoteRes = {
  readonly rateLimit?: RateLimit | null
};
export type KBFSImpteamUpgradeUpdate = {
  readonly convID: ConversationID,
  readonly inboxVers: InboxVers,
  readonly topicType: TopicType
};
export type LocalConversationVers = Uint64;
export type MakePreviewRes = {
  readonly mimeType: String,
  readonly previewMimeType?: String | null,
  readonly location?: PreviewLocation | null,
  readonly metadata?: AssetMetadata | null,
  readonly baseMetadata?: AssetMetadata | null
};
export type MarkAsReadLocalRes = {
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null
};
export type MarkAsReadRes = {
  readonly rateLimit?: RateLimit | null
};
export type MemberInfo = {
  readonly member: String,
  readonly status: ConversationMemberStatus
};
export type MembersUpdateInfo = {
  readonly convID: ConversationID,
  readonly members?: Array<MemberInfo> | null
};
export type MerkleRoot = {
  readonly seqno: Long,
  readonly hash: Bytes
};
export type MessageAttachment = {
  readonly object: Asset,
  readonly preview?: Asset | null,
  readonly previews?: Array<Asset> | null,
  readonly metadata: Bytes,
  readonly uploaded: Boolean
};
export type MessageAttachmentUploaded = {
  readonly messageID: MessageID,
  readonly object: Asset,
  readonly previews?: Array<Asset> | null,
  readonly metadata: Bytes
};
export type MessageBody = {
  messageType: 1,
  text: MessageText | null
} | {
  messageType: 2,
  attachment: MessageAttachment | null
} | {
  messageType: 3,
  edit: MessageEdit | null
} | {
  messageType: 4,
  delete: MessageDelete | null
} | {
  messageType: 5,
  metadata: MessageConversationMetadata | null
} | {
  messageType: 7,
  headline: MessageHeadline | null
} | {
  messageType: 8,
  attachmentuploaded: MessageAttachmentUploaded | null
} | {
  messageType: 9,
  join: MessageJoin | null
} | {
  messageType: 10,
  leave: MessageLeave | null
} | {
  messageType: 11,
  system: MessageSystem | null
} | {
  messageType: 12,
  deletehistory: MessageDeleteHistory | null
} | {
  messageType: 13,
  reaction: MessageReaction | null
} | {
  messageType: 14,
  sendpayment: MessageSendPayment | null
} | {
  messageType: 15,
  requestpayment: MessageRequestPayment | null
} | {
  messageType: 16,
  unfurl: MessageUnfurl | null
} | {
  messageType: 17,
  flip: MessageFlip | null
};
export type MessageBoxed = {
  readonly version: MessageBoxedVersion,
  readonly serverHeader?: MessageServerHeader | null,
  readonly clientHeader: MessageClientHeader,
  readonly headerCiphertext: SealedData,
  readonly bodyCiphertext: EncryptedData,
  readonly verifyKey: Bytes,
  readonly keyGeneration: Int
};
export type MessageBoxedVersion = 0 | 1 | 2 | 3 | 4; // V4_4

export type MessageClientHeader = {
  readonly conv: ConversationIDTriple,
  readonly tlfName: String,
  readonly tlfPublic: Boolean,
  readonly messageType: MessageType,
  readonly supersedes: MessageID,
  readonly kbfsCryptKeysUsed?: Boolean | null,
  readonly deletes?: Array<MessageID> | null,
  readonly prev?: Array<MessagePreviousPointer> | null,
  readonly deleteHistory?: MessageDeleteHistory | null,
  readonly sender: Gregor1.UID,
  readonly senderDevice: Gregor1.DeviceID,
  readonly merkleRoot?: MerkleRoot | null,
  readonly outboxID?: OutboxID | null,
  readonly outboxInfo?: OutboxInfo | null,
  readonly em /* ephemeralMetadata */?: MsgEphemeralMetadata | null,
  readonly pm /* pairwiseMacs */: {
    [K in string]: Bytes;
  }
};
export type MessageClientHeaderVerified = {
  readonly conv: ConversationIDTriple,
  readonly tlfName: String,
  readonly tlfPublic: Boolean,
  readonly messageType: MessageType,
  readonly prev?: Array<MessagePreviousPointer> | null,
  readonly sender: Gregor1.UID,
  readonly senderDevice: Gregor1.DeviceID,
  readonly kbfsCryptKeysUsed?: Boolean | null,
  readonly merkleRoot?: MerkleRoot | null,
  readonly outboxID?: OutboxID | null,
  readonly outboxInfo?: OutboxInfo | null,
  readonly em /* ephemeralMetadata */?: MsgEphemeralMetadata | null,
  readonly rt /* rtime */: Gregor1.Time,
  readonly pm /* hasPairwiseMacs */: Boolean
};
export type MessageConversationMetadata = {
  readonly conversationTitle: String
};
export type MessageDelete = {
  readonly messageIDs?: Array<MessageID> | null
};
export type MessageDeleteHistory = {
  readonly upto: MessageID
};
export type MessageEdit = {
  readonly messageID: MessageID,
  readonly body: String
};
export type MessageFlip = {
  readonly text: String,
  readonly gameID: FlipGameID,
  readonly flipConvID: ConversationID
};
export type MessageHeadline = {
  readonly headline: String
};
export type MessageID = Uint;
export type MessageIDControl = {
  readonly pivot?: MessageID | null,
  readonly recent: Boolean,
  readonly num: Int
};
export type MessageJoin = {};
export type MessageLeave = {};
export type MessagePlaintext = {
  readonly clientHeader: MessageClientHeader,
  readonly messageBody: MessageBody,
  readonly supersedesOutboxID?: OutboxID | null
};
export type MessagePreviousPointer = {
  readonly id: MessageID,
  readonly hash: Hash
};
export type MessageReaction = {
  readonly m /* messageID */: MessageID,
  readonly b /* body */: String
};
export type MessageRequestPayment = {
  readonly requestID: Stellar1.KeybaseRequestID,
  readonly note: String
};
export type MessageSendPayment = {
  readonly paymentID: Stellar1.PaymentID
};
export type MessageServerHeader = {
  readonly messageID: MessageID,
  readonly supersededBy: MessageID,
  readonly r /* reactionIDs */?: Array<MessageID> | null,
  readonly u /* unfurlIDs */?: Array<MessageID> | null,
  readonly ctime: Gregor1.Time,
  readonly n /* now */: Gregor1.Time,
  readonly rt /* rtime */?: Gregor1.Time | null
};
export type MessageSummary = {
  readonly msgID: MessageID,
  readonly messageType: MessageType,
  readonly tlfName: String,
  readonly tlfPublic: Boolean,
  readonly ctime: Gregor1.Time
};
export type MessageSystem = {
  systemType: 0,
  addedtoteam: MessageSystemAddedToTeam | null
} | {
  systemType: 1,
  inviteaddedtoteam: MessageSystemInviteAddedToTeam | null
} | {
  systemType: 2,
  complexteam: MessageSystemComplexTeam | null
} | {
  systemType: 3,
  createteam: MessageSystemCreateTeam | null
} | {
  systemType: 4,
  gitpush: MessageSystemGitPush | null
} | {
  systemType: 5,
  changeavatar: MessageSystemChangeAvatar | null
} | {
  systemType: 6,
  changeretention: MessageSystemChangeRetention | null
} | {
  systemType: 7,
  bulkaddtoconv: MessageSystemBulkAddToConv | null
};
export type MessageSystemAddedToTeam = {
  readonly team: String,
  readonly adder: String,
  readonly addee: String,
  readonly owners?: Array<String> | null,
  readonly admins?: Array<String> | null,
  readonly writers?: Array<String> | null,
  readonly readers?: Array<String> | null
};
export type MessageSystemBulkAddToConv = {
  readonly usernames?: Array<String> | null
};
export type MessageSystemChangeAvatar = {
  readonly team: String,
  readonly user: String
};
export type MessageSystemChangeRetention = {
  readonly isTeam: Boolean,
  readonly isInherit: Boolean,
  readonly membersType: ConversationMembersType,
  readonly policy: RetentionPolicy,
  readonly user: String
};
export type MessageSystemComplexTeam = {
  readonly team: String
};
export type MessageSystemCreateTeam = {
  readonly team: String,
  readonly creator: String
};
export type MessageSystemGitPush = {
  readonly team: String,
  readonly pusher: String,
  readonly repoName: String,
  readonly repoID: Keybase1.RepoID,
  readonly refs?: Array<Keybase1.GitRefMetadata> | null,
  readonly pushType: Keybase1.GitPushType,
  readonly previousRepoName: String
};
export type MessageSystemInviteAddedToTeam = {
  readonly team: String,
  readonly inviter: String,
  readonly invitee: String,
  readonly adder: String,
  readonly inviteType: Keybase1.TeamInviteCategory
};
export type MessageSystemType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7; // BULKADDTOCONV_7

export type MessageText = {
  readonly body: String,
  readonly payments?: Array<TextPayment> | null
};
export type MessageType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17; // FLIP_17

export type MessageUnboxed = {
  state: 1,
  valid: MessageUnboxedValid | null
} | {
  state: 2,
  error: MessageUnboxedError | null
} | {
  state: 3,
  outbox: OutboxRecord | null
} | {
  state: 4,
  placeholder: MessageUnboxedPlaceholder | null
};
export type MessageUnboxedError = {
  readonly errType: MessageUnboxedErrorType,
  readonly errMsg: String,
  readonly internalErrMsg: String,
  readonly versionKind: VersionKind,
  readonly versionNumber: Int,
  readonly isCritical: Boolean,
  readonly senderUsername: String,
  readonly senderDeviceName: String,
  readonly senderDeviceType: String,
  readonly messageID: MessageID,
  readonly messageType: MessageType,
  readonly ctime: Gregor1.Time,
  readonly isEphemeral: Boolean,
  readonly isEphemeralExpired: Boolean,
  readonly etime: Gregor1.Time
};
export type MessageUnboxedErrorType = 0 | 1 | 2 | 3 | 4 | 5; // PAIRWISE_MISSING_5

export type MessageUnboxedPlaceholder = {
  readonly messageID: MessageID,
  readonly hidden: Boolean
};
export type MessageUnboxedState = 1 | 2 | 3 | 4; // PLACEHOLDER_4

export type MessageUnboxedValid = {
  readonly clientHeader: MessageClientHeaderVerified,
  readonly serverHeader: MessageServerHeader,
  readonly messageBody: MessageBody,
  readonly senderUsername: String,
  readonly senderDeviceName: String,
  readonly senderDeviceType: String,
  readonly bodyHash: Hash,
  readonly headerHash: Hash,
  readonly headerSignature?: SignatureInfo | null,
  readonly verificationKey?: Bytes | null,
  readonly senderDeviceRevokedAt?: Gregor1.Time | null,
  readonly atMentionUsernames?: Array<String> | null,
  readonly atMentions?: Array<Gregor1.UID> | null,
  readonly channelMention: ChannelMention,
  readonly channelNameMentions?: Array<ChannelNameMention> | null,
  readonly reactions: ReactionMap,
  readonly unfurls: {
    [K in string]: UnfurlResult;
  }
};
export type MessageUnfurl = {
  readonly unfurl: UnfurlResult,
  readonly messageID: MessageID
};
export type MessagesUpdated = {
  readonly convID: ConversationID,
  readonly updates?: Array<UIMessage> | null
};
export type MsgEphemeralMetadata = {
  readonly l /* lifetime */: Gregor1.DurationSec,
  readonly g /* generation */: Keybase1.EkGeneration,
  readonly u /* explodedBy */?: String | null
};
export type NameQuery = {
  readonly name: String,
  readonly tlfID?: TLFID | null,
  readonly membersType: ConversationMembersType
};
export type NewConversationInfo = {
  readonly convID: ConversationID,
  readonly conv?: InboxUIItem | null
};
export type NewConversationLocalRes = {
  readonly conv: ConversationLocal,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type NewConversationPayload = {
  readonly Action: String,
  readonly convID: ConversationID,
  readonly inboxVers: InboxVers,
  readonly topicType: TopicType,
  readonly unreadUpdate?: UnreadUpdate | null
};
export type NewConversationRemoteRes = {
  readonly convID: ConversationID,
  readonly createdComplexTeam: Boolean,
  readonly rateLimit?: RateLimit | null
};
export type NewMessagePayload = {
  readonly Action: String,
  readonly convID: ConversationID,
  readonly message: MessageBoxed,
  readonly inboxVers: InboxVers,
  readonly topicType: TopicType,
  readonly unreadUpdate?: UnreadUpdate | null,
  readonly maxMsgs?: Array<MessageSummary> | null
};
export type NonblockFetchRes = {
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type NotificationKind = 0 | 1; // ATMENTION_1

export type OutboxErrorType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8; // UPLOADFAILED_8

export type OutboxID = Bytes;
export type OutboxInfo = {
  readonly prev: MessageID,
  readonly composeTime: Gregor1.Time
};
export type OutboxRecord = {
  readonly state: OutboxState,
  readonly outboxID: OutboxID,
  readonly convID: ConversationID,
  readonly ctime: Gregor1.Time,
  readonly Msg: MessagePlaintext,
  readonly identifyBehavior: Keybase1.TLFIdentifyBehavior,
  readonly ordinal: Int,
  readonly preview?: MakePreviewRes | null
};
export type OutboxState = {
  state: 0,
  sending: Int | null
} | {
  state: 1,
  error: OutboxStateError | null
};
export type OutboxStateError = {
  readonly message: String,
  readonly typ: OutboxErrorType
};
export type OutboxStateType = 0 | 1; // ERROR_1

export type Pagination = {
  readonly next: Bytes,
  readonly previous: Bytes,
  readonly num: Int,
  readonly last: Boolean
};
export type PostFileAttachmentArg = {
  readonly conversationID: ConversationID,
  readonly tlfName: String,
  readonly visibility: Keybase1.TLFVisibility,
  readonly filename: String,
  readonly title: String,
  readonly metadata: Bytes,
  readonly identifyBehavior: Keybase1.TLFIdentifyBehavior,
  readonly callerPreview?: MakePreviewRes | null,
  readonly outboxID?: OutboxID | null,
  readonly ephemeralLifetime?: Gregor1.DurationSec | null
};
export type PostLocalNonblockRes = {
  readonly rateLimits?: Array<RateLimit> | null,
  readonly outboxID: OutboxID,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type PostLocalRes = {
  readonly rateLimits?: Array<RateLimit> | null,
  readonly messageID: MessageID,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type PostRemoteRes = {
  readonly msgHeader: MessageServerHeader,
  readonly rateLimit?: RateLimit | null
};
export type PreviewLocation = {
  ltyp: 0,
  url: String | null
} | {
  ltyp: 1,
  file: String | null
} | {
  ltyp: 2,
  bytes: Bytes | null
};
export type PreviewLocationTyp = 0 | 1 | 2; // BYTES_2

export type ProfileSearchConvStats = {
  readonly numMessages: Int,
  readonly indexSize: Int,
  readonly durationMsec: Gregor1.DurationMsec,
  readonly percentIndexed: Int
};
export type RateLimit = {
  readonly name: String,
  readonly callsRemaining: Int,
  readonly windowReset: Int,
  readonly maxCalls: Int
};
export type Reaction = {
  readonly ctime: Gregor1.Time,
  readonly reactionMsgID: MessageID
};
export type ReactionMap = {
  readonly reactions: {
    [K in string]: {
      [K in string]: Reaction;
    };
  }
};
export type ReactionUpdate = {
  readonly reactions: ReactionMap,
  readonly targetMsgID: MessageID
};
export type ReactionUpdateNotif = {
  readonly convID: ConversationID,
  readonly topReacjis?: Array<String> | null,
  readonly reactionUpdates?: Array<ReactionUpdate> | null
};
export type ReadMessageInfo = {
  readonly convID: ConversationID,
  readonly msgID: MessageID,
  readonly conv?: InboxUIItem | null
};
export type ReadMessagePayload = {
  readonly Action: String,
  readonly convID: ConversationID,
  readonly msgID: MessageID,
  readonly inboxVers: InboxVers,
  readonly topicType: TopicType,
  readonly unreadUpdate?: UnreadUpdate | null
};
export type RemoteUserTypingUpdate = {
  readonly uid: Gregor1.UID,
  readonly deviceID: Gregor1.DeviceID,
  readonly convID: ConversationID,
  readonly typing: Boolean
};
export type RetentionPolicy = {
  typ: 1,
  retain: RpRetain | null
} | {
  typ: 2,
  expire: RpExpire | null
} | {
  typ: 3,
  inherit: RpInherit | null
} | {
  typ: 4,
  ephemeral: RpEphemeral | null
};
export type RetentionPolicyType = 0 | 1 | 2 | 3 | 4; // EPHEMERAL_4

export type RpEphemeral = {
  readonly age: Gregor1.DurationSec
};
export type RpExpire = {
  readonly age: Gregor1.DurationSec
};
export type RpInherit = {};
export type RpRetain = {};
export type S3Params = {
  readonly bucket: String,
  readonly objectKey: String,
  readonly accessKey: String,
  readonly acl: String,
  readonly regionName: String,
  readonly regionEndpoint: String,
  readonly regionBucketEndpoint: String
};
export type SealedData = {
  readonly v: Int,
  readonly e: Bytes,
  readonly n: Bytes
};
export type SearchInboxRes = {
  readonly res?: ChatSearchInboxResults | null,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type SearchOpts = {
  readonly sentBy: String,
  readonly sentBefore: Gregor1.Time,
  readonly sentAfter: Gregor1.Time,
  readonly maxHits: Int,
  readonly maxMessages: Int,
  readonly beforeContext: Int,
  readonly afterContext: Int,
  readonly forceReindex: Boolean,
  readonly maxConvs: Int
};
export type SearchRegexpRes = {
  readonly hits?: Array<ChatSearchHit> | null,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type ServerCacheVers = {
  readonly inboxVers: Int,
  readonly bodiesVers: Int
};
export type ServerNowRes = {
  readonly rateLimit?: RateLimit | null,
  readonly now: Gregor1.Time
};
export type SetAppNotificationSettingsInfo = {
  readonly convID: ConversationID,
  readonly settings: ConversationNotificationInfo
};
export type SetAppNotificationSettingsLocalRes = {
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null
};
export type SetAppNotificationSettingsPayload = {
  readonly Action: String,
  readonly convID: ConversationID,
  readonly inboxVers: InboxVers,
  readonly settings: ConversationNotificationInfo,
  readonly topicType: TopicType,
  readonly unreadUpdate?: UnreadUpdate | null
};
export type SetAppNotificationSettingsRes = {
  readonly rateLimit?: RateLimit | null
};
export type SetConvMinWriterRoleRes = {
  readonly rateLimit?: RateLimit | null
};
export type SetConvRetentionUpdate = {
  readonly inboxVers: InboxVers,
  readonly convID: ConversationID,
  readonly policy: RetentionPolicy
};
export type SetConvSettingsUpdate = {
  readonly inboxVers: InboxVers,
  readonly convID: ConversationID,
  readonly convSettings?: ConversationSettings | null
};
export type SetConversationStatusLocalRes = {
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null
};
export type SetConversationStatusRes = {
  readonly rateLimit?: RateLimit | null
};
export type SetRetentionRes = {
  readonly rateLimit?: RateLimit | null
};
export type SetStatusInfo = {
  readonly convID: ConversationID,
  readonly status: ConversationStatus,
  readonly conv?: InboxUIItem | null
};
export type SetStatusPayload = {
  readonly Action: String,
  readonly convID: ConversationID,
  readonly status: ConversationStatus,
  readonly inboxVers: InboxVers,
  readonly topicType: TopicType,
  readonly unreadUpdate?: UnreadUpdate | null
};
export type SetTeamRetentionUpdate = {
  readonly inboxVers: InboxVers,
  readonly teamID: Keybase1.TeamID,
  readonly policy: RetentionPolicy
};
export type SignEncryptedData = {
  readonly v: Int,
  readonly e: Bytes,
  readonly n: Bytes
};
export type SignatureInfo = {
  readonly v: Int,
  readonly s: Bytes,
  readonly k: Bytes
};
export type StaleUpdateType = 0 | 1 | 2; // CONVUPDATE_2

export type StaticConfig = {
  readonly deletableByDeleteHistory?: Array<MessageType> | null,
  readonly builtinCommands?: Array<BuiltinCommandGroup> | null
};
export type SubteamRenameUpdate = {
  readonly convIDs?: Array<ConversationID> | null,
  readonly inboxVers: InboxVers
};
export type SweepRes = {
  readonly foundTask: Boolean,
  readonly deletedMessages: Boolean,
  readonly expunge: Expunge
};
export type SyncAllNotificationRes = {
  typ: 0,
  state: Gregor1.State | null
} | {
  typ: 1,
  incremental: Gregor1.SyncResult | null
};
export type SyncAllNotificationType = 0 | 1; // INCREMENTAL_1

export type SyncAllProtVers = 0 | 1; // V1_1

export type SyncAllResult = {
  readonly auth: Gregor1.AuthResult,
  readonly chat: SyncChatRes,
  readonly notification: SyncAllNotificationRes,
  readonly badge: UnreadUpdateFull
};
export type SyncChatRes = {
  readonly cacheVers: ServerCacheVers,
  readonly inboxRes: SyncInboxRes
};
export type SyncInboxRes = {
  typ: 0
} | {
  typ: 1,
  incremental: SyncIncrementalRes | null
} | {
  typ: 2
};
export type SyncInboxResType = 0 | 1 | 2; // CLEAR_2

export type SyncIncrementalRes = {
  readonly vers: InboxVers,
  readonly convs?: Array<Conversation> | null
};
export type TLFConvOrdinal = Uint;
export type TLFFinalizeUpdate = {
  readonly finalizeInfo: ConversationFinalizeInfo,
  readonly convIDs?: Array<ConversationID> | null,
  readonly inboxVers: InboxVers
};
export type TLFID = Bytes;
export type TLFResolveUpdate = {
  readonly convID: ConversationID,
  readonly inboxVers: InboxVers
};
export type TeamChannelUpdate = {
  readonly teamID: TLFID
};
export type TeamType = 0 | 1 | 2; // COMPLEX_2

export type TeamTypeInfo = {
  readonly convID: ConversationID,
  readonly teamType: TeamType,
  readonly conv?: InboxUIItem | null
};
export type TeamTypePayload = {
  readonly Action: String,
  readonly convID: ConversationID,
  readonly teamType: TeamType,
  readonly inboxVers: InboxVers,
  readonly topicType: TopicType,
  readonly unreadUpdate?: UnreadUpdate | null
};
export type TextPayment = {
  readonly username: String,
  readonly paymentText: String,
  readonly result: TextPaymentResult
};
export type TextPaymentResult = {
  resultTyp: 1,
  error: String | null
} | {
  resultTyp: 0,
  sent: Stellar1.PaymentID | null
};
export type TextPaymentResultTyp = 0 | 1; // ERROR_1

export type ThreadID = Bytes;
export type ThreadView = {
  readonly messages?: Array<MessageUnboxed> | null,
  readonly pagination?: Pagination | null
};
export type ThreadViewBoxed = {
  readonly messages?: Array<MessageBoxed> | null,
  readonly pagination?: Pagination | null
};
export type TopicID = Bytes;
export type TopicNameState = Bytes;
export type TopicType = 0 | 1 | 2 | 3; // KBFSFILEEDIT_3

export type TyperInfo = {
  readonly uid: Keybase1.UID,
  readonly username: String,
  readonly deviceID: Keybase1.DeviceID,
  readonly deviceName: String,
  readonly deviceType: String
};
export type UIAssetUrlInfo = {
  readonly previewUrl: String,
  readonly fullUrl: String,
  readonly fullUrlCached: Boolean,
  readonly mimeType: String,
  readonly videoDuration?: String | null,
  readonly inlineVideoPlayable: Boolean
};
export type UIChannelNameMention = {
  readonly name: String,
  readonly convID: String
};
export type UIChatPayment = {
  readonly username: String,
  readonly fullName: String,
  readonly xlmAmount: String,
  readonly error?: String | null,
  readonly displayAmount?: String | null
};
export type UIChatPaymentSummary = {
  readonly xlmTotal: String,
  readonly displayTotal: String,
  readonly payments?: Array<UIChatPayment> | null
};
export type UICoinFlipAbsenteeError = {
  readonly absentees?: Array<UICoinFlipErrorParticipant> | null
};
export type UICoinFlipError = {
  typ: 0,
  generic: String | null
} | {
  typ: 1,
  absentee: UICoinFlipAbsenteeError | null
} | {
  typ: 2
} | {
  typ: 3
} | {
  typ: 4,
  dupreg: UICoinFlipErrorParticipant | null
} | {
  typ: 5,
  dupcommitcomplete: UICoinFlipErrorParticipant | null
} | {
  typ: 6,
  dupreveal: UICoinFlipErrorParticipant | null
} | {
  typ: 7,
  commitmismatch: UICoinFlipErrorParticipant | null
};
export type UICoinFlipErrorParticipant = {
  readonly user: String,
  readonly device: String
};
export type UICoinFlipErrorTyp = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7; // COMMITMISMATCH_7

export type UICoinFlipHand = {
  readonly target: String,
  readonly hand?: Array<Int> | null
};
export type UICoinFlipParticipant = {
  readonly uid: String,
  readonly deviceID: String,
  readonly username: String,
  readonly deviceName: String,
  readonly commitment: String,
  readonly reveal?: String | null
};
export type UICoinFlipPhase = 0 | 1 | 2 | 3; // ERROR_3

export type UICoinFlipResult = {
  typ: 0,
  number: String | null
} | {
  typ: 1,
  shuffle: Array<String> | null
} | {
  typ: 2,
  deck: Array<Int> | null
} | {
  typ: 3,
  hands: Array<UICoinFlipHand> | null
} | {
  typ: 4,
  coin: Bool | null
};
export type UICoinFlipResultTyp = 0 | 1 | 2 | 3 | 4; // COIN_4

export type UICoinFlipStatus = {
  readonly gameID: String,
  readonly phase: UICoinFlipPhase,
  readonly progressText: String,
  readonly resultText: String,
  readonly commitmentVisualization: String,
  readonly revealVisualization: String,
  readonly participants?: Array<UICoinFlipParticipant> | null,
  readonly errorInfo?: UICoinFlipError | null,
  readonly resultInfo?: UICoinFlipResult | null
};
export type UICommandMarkdown = {
  readonly body: String,
  readonly title?: String | null
};
export type UIMessage = {
  state: 1,
  valid: UIMessageValid | null
} | {
  state: 2,
  error: MessageUnboxedError | null
} | {
  state: 3,
  outbox: UIMessageOutbox | null
} | {
  state: 4,
  placeholder: MessageUnboxedPlaceholder | null
};
export type UIMessageOutbox = {
  readonly state: OutboxState,
  readonly outboxID: String,
  readonly messageType: MessageType,
  readonly body: String,
  readonly decoratedTextBody?: String | null,
  readonly ctime: Gregor1.Time,
  readonly ordinal: Double,
  readonly isEphemeral: Boolean,
  readonly flipGameID?: String | null,
  readonly filename: String,
  readonly title: String,
  readonly preview?: MakePreviewRes | null
};
export type UIMessageUnfurlInfo = {
  readonly unfurlMessageID: MessageID,
  readonly url: String,
  readonly unfurl: UnfurlDisplay,
  readonly isCollapsed: Boolean
};
export type UIMessageValid = {
  readonly messageID: MessageID,
  readonly ctime: Gregor1.Time,
  readonly outboxID?: String | null,
  readonly messageBody: MessageBody,
  readonly decoratedTextBody?: String | null,
  readonly senderUsername: String,
  readonly senderDeviceName: String,
  readonly senderDeviceType: String,
  readonly senderUID: Gregor1.UID,
  readonly senderDeviceID: Gregor1.DeviceID,
  readonly superseded: Boolean,
  readonly assetUrlInfo?: UIAssetUrlInfo | null,
  readonly senderDeviceRevokedAt?: Gregor1.Time | null,
  readonly atMentions?: Array<String> | null,
  readonly channelMention: ChannelMention,
  readonly channelNameMentions?: Array<UIChannelNameMention> | null,
  readonly isEphemeral: Boolean,
  readonly isEphemeralExpired: Boolean,
  readonly explodedBy?: String | null,
  readonly etime: Gregor1.Time,
  readonly reactions: ReactionMap,
  readonly hasPairwiseMacs: Boolean,
  readonly paymentInfos?: Array<UIPaymentInfo> | null,
  readonly requestInfo?: UIRequestInfo | null,
  readonly unfurls?: Array<UIMessageUnfurlInfo> | null,
  readonly isCollapsed: Boolean,
  readonly flipGameID?: String | null,
  readonly isDeleteable: Boolean,
  readonly isEditable: Boolean
};
export type UIMessages = {
  readonly messages?: Array<UIMessage> | null,
  readonly pagination?: UIPagination | null
};
export type UIPagination = {
  readonly next: String,
  readonly previous: String,
  readonly num: Int,
  readonly last: Boolean
};
export type UIPaymentInfo = {
  readonly accountID?: Stellar1.AccountID | null,
  readonly amountDescription: String,
  readonly worth: String,
  readonly worthAtSendTime: String,
  readonly delta: Stellar1.BalanceDelta,
  readonly note: String,
  readonly paymentID: Stellar1.PaymentID,
  readonly status: Stellar1.PaymentStatus,
  readonly statusDescription: String,
  readonly statusDetail: String,
  readonly showCancel: Boolean,
  readonly fromUsername: String,
  readonly toUsername: String
};
export type UIRequestInfo = {
  readonly amount: String,
  readonly amountDescription: String,
  readonly asset?: Stellar1.Asset | null,
  readonly currency?: Stellar1.OutsideCurrencyCode | null,
  readonly worthAtRequestTime: String,
  readonly status: Stellar1.RequestStatus
};
export type UITextDecoration = {
  typ: 0,
  payment: TextPayment | null
} | {
  typ: 1,
  atmention: String | null
} | {
  typ: 2,
  channelnamemention: UIChannelNameMention | null
};
export type UITextDecorationTyp = 0 | 1 | 2; // CHANNELNAMEMENTION_2

export type Unfurl = {
  unfurlType: 0,
  generic: UnfurlGeneric | null
} | {
  unfurlType: 1,
  youtube: UnfurlYoutube | null
} | {
  unfurlType: 2,
  giphy: UnfurlGiphy | null
};
export type UnfurlDisplay = {
  unfurlType: 0,
  generic: UnfurlGenericDisplay | null
} | {
  unfurlType: 1,
  youtube: UnfurlYoutubeDisplay | null
} | {
  unfurlType: 2,
  giphy: UnfurlGiphyDisplay | null
};
export type UnfurlGeneric = {
  readonly title: String,
  readonly url: String,
  readonly siteName: String,
  readonly favicon?: Asset | null,
  readonly image?: Asset | null,
  readonly publishTime?: Int | null,
  readonly description?: String | null
};
export type UnfurlGenericDisplay = {
  readonly title: String,
  readonly url: String,
  readonly siteName: String,
  readonly favicon?: UnfurlImageDisplay | null,
  readonly media?: UnfurlImageDisplay | null,
  readonly publishTime?: Int | null,
  readonly description?: String | null
};
export type UnfurlGenericRaw = {
  readonly title: String,
  readonly url: String,
  readonly siteName: String,
  readonly faviconUrl?: String | null,
  readonly imageUrl?: String | null,
  readonly video?: UnfurlVideo | null,
  readonly publishTime?: Int | null,
  readonly description?: String | null
};
export type UnfurlGiphy = {
  readonly favicon?: Asset | null,
  readonly image?: Asset | null,
  readonly video?: Asset | null
};
export type UnfurlGiphyDisplay = {
  readonly favicon?: UnfurlImageDisplay | null,
  readonly image?: UnfurlImageDisplay | null,
  readonly video?: UnfurlImageDisplay | null
};
export type UnfurlGiphyRaw = {
  readonly imageUrl: String,
  readonly video?: UnfurlVideo | null,
  readonly faviconUrl?: String | null
};
export type UnfurlImageDisplay = {
  readonly url: String,
  readonly height: Int,
  readonly width: Int,
  readonly isVideo: Boolean
};
export type UnfurlMode = 0 | 1 | 2; // WHITELISTED_2

export type UnfurlPromptAction = 0 | 1 | 2 | 3 | 4; // ONETIME_4

export type UnfurlPromptResult = {
  actionType: 0
} | {
  actionType: 1
} | {
  actionType: 3
} | {
  actionType: 2,
  accept: String | null
} | {
  actionType: 4,
  onetime: String | null
};
export type UnfurlRaw = {
  unfurlType: 0,
  generic: UnfurlGenericRaw | null
} | {
  unfurlType: 1,
  youtube: UnfurlYoutubeRaw | null
} | {
  unfurlType: 2,
  giphy: UnfurlGiphyRaw | null
};
export type UnfurlResult = {
  readonly unfurl: Unfurl,
  readonly url: String
};
export type UnfurlSettings = {
  readonly mode: UnfurlMode,
  readonly whitelist: {
    [K in string]: Boolean;
  }
};
export type UnfurlSettingsDisplay = {
  readonly mode: UnfurlMode,
  readonly whitelist?: Array<String> | null
};
export type UnfurlType = 0 | 1 | 2; // GIPHY_2

export type UnfurlVideo = {
  readonly url: String,
  readonly mimeType: String,
  readonly height: Int,
  readonly width: Int
};
export type UnfurlYoutube = {};
export type UnfurlYoutubeDisplay = {};
export type UnfurlYoutubeRaw = {};
export type UnreadFirstNumLimit = {
  readonly NumRead: Int,
  readonly AtLeast: Int,
  readonly AtMost: Int
};
export type UnreadUpdate = {
  readonly convID: ConversationID,
  readonly unreadMessages: Int,
  readonly unreadNotifyingMessages: {
    [K in string]: Int;
  },
  readonly UnreadMessages /* compatUnreadMessages */: Int,
  readonly diff: Boolean
};
export type UnreadUpdateFull = {
  readonly ignore: Boolean,
  readonly inboxVers: InboxVers,
  readonly inboxSyncStatus: SyncInboxResType,
  readonly updates?: Array<UnreadUpdate> | null
};
export type UnreadlineRes = {
  readonly offline: Boolean,
  readonly rateLimits?: Array<RateLimit> | null,
  readonly identifyFailures?: Array<Keybase1.TLFIdentifyFailure> | null,
  readonly unreadlineID?: MessageID | null
};
export type UnverifiedInboxUIItem = {
  readonly convID: String,
  readonly topicType: TopicType,
  readonly isPublic: Boolean,
  readonly name: String,
  readonly visibility: Keybase1.TLFVisibility,
  readonly status: ConversationStatus,
  readonly membersType: ConversationMembersType,
  readonly memberStatus: ConversationMemberStatus,
  readonly teamType: TeamType,
  readonly notifications?: ConversationNotificationInfo | null,
  readonly time: Gregor1.Time,
  readonly version: ConversationVers,
  readonly localVersion: LocalConversationVers,
  readonly convRetention?: RetentionPolicy | null,
  readonly teamRetention?: RetentionPolicy | null,
  readonly maxMsgID: MessageID,
  readonly maxVisibleMsgID: MessageID,
  readonly readMsgID: MessageID,
  readonly localMetadata?: UnverifiedInboxUIItemMetadata | null,
  readonly finalizeInfo?: ConversationFinalizeInfo | null,
  readonly supersedes?: Array<ConversationMetadata> | null,
  readonly supersededBy?: Array<ConversationMetadata> | null,
  readonly commands: ConversationCommandGroups
};
export type UnverifiedInboxUIItemMetadata = {
  readonly channelName: String,
  readonly headline: String,
  readonly snippet: String,
  readonly snippetDecoration: String,
  readonly writerNames?: Array<String> | null,
  readonly resetParticipants?: Array<String> | null
};
export type UnverifiedInboxUIItems = {
  readonly items?: Array<UnverifiedInboxUIItem> | null,
  readonly pagination?: UIPagination | null,
  readonly offline: Boolean
};
export type UpdateConversationMembership = {
  readonly inboxVers: InboxVers,
  readonly joined?: Array<ConversationMember> | null,
  readonly removed?: Array<ConversationMember> | null,
  readonly reset?: Array<ConversationMember> | null,
  readonly previewed?: Array<ConversationID> | null,
  readonly unreadUpdate?: UnreadUpdate | null,
  readonly unreadUpdates?: Array<UnreadUpdate> | null
};
export type UpdateConversations = {
  readonly inboxVers: InboxVers,
  readonly convUpdates?: Array<ConversationUpdate> | null
};
export type VersionKind = String;

export type IncomingCallMapType = {
  'chat.1.chatUi.chatAttachmentDownloadStart'?: (
    params: MessageTypes["chat.1.chatUi.chatAttachmentDownloadStart"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatAttachmentDownloadProgress'?: (
    params: MessageTypes["chat.1.chatUi.chatAttachmentDownloadProgress"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatAttachmentDownloadDone'?: (
    params: MessageTypes["chat.1.chatUi.chatAttachmentDownloadDone"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatInboxUnverified'?: (
    params: MessageTypes["chat.1.chatUi.chatInboxUnverified"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatInboxConversation'?: (
    params: MessageTypes["chat.1.chatUi.chatInboxConversation"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatInboxFailed'?: (
    params: MessageTypes["chat.1.chatUi.chatInboxFailed"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatThreadCached'?: (
    params: MessageTypes["chat.1.chatUi.chatThreadCached"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatThreadFull'?: (
    params: MessageTypes["chat.1.chatUi.chatThreadFull"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchHit'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchHit"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchDone'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchDone"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchInboxHit'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchInboxHit"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchInboxDone'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchInboxDone"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchIndexStatus'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchIndexStatus"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatConfirmChannelDelete'?: (
    params: MessageTypes["chat.1.chatUi.chatConfirmChannelDelete"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatStellarShowConfirm'?: (
    params: MessageTypes["chat.1.chatUi.chatStellarShowConfirm"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatStellarDataConfirm'?: (
    params: MessageTypes["chat.1.chatUi.chatStellarDataConfirm"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatStellarDataError'?: (
    params: MessageTypes["chat.1.chatUi.chatStellarDataError"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatStellarDone'?: (
    params: MessageTypes["chat.1.chatUi.chatStellarDone"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatGiphySearchResults'?: (
    params: MessageTypes["chat.1.chatUi.chatGiphySearchResults"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatGiphyToggleResultWindow'?: (
    params: MessageTypes["chat.1.chatUi.chatGiphyToggleResultWindow"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatShowManageChannels'?: (
    params: MessageTypes["chat.1.chatUi.chatShowManageChannels"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatCoinFlipStatus'?: (
    params: MessageTypes["chat.1.chatUi.chatCoinFlipStatus"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatCommandMarkdown'?: (
    params: MessageTypes["chat.1.chatUi.chatCommandMarkdown"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.NewChatActivity'?: (
    params: MessageTypes["chat.1.NotifyChat.NewChatActivity"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatIdentifyUpdate'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatIdentifyUpdate"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatTLFFinalize'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatTLFFinalize"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatTLFResolve'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatTLFResolve"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatInboxStale'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatInboxStale"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatThreadsStale'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatThreadsStale"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatTypingUpdate'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatTypingUpdate"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatJoinedConversation'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatJoinedConversation"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatLeftConversation'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatLeftConversation"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatResetConversation'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatResetConversation"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatInboxSyncStarted'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatInboxSyncStarted"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatInboxSynced'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatInboxSynced"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatSetConvRetention'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatSetConvRetention"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatSetTeamRetention'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatSetTeamRetention"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatSetConvSettings'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatSetConvSettings"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatSubteamRename'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatSubteamRename"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatKBFSToImpteamUpgrade'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatKBFSToImpteamUpgrade"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatAttachmentUploadStart'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatAttachmentUploadStart"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatAttachmentUploadProgress'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatAttachmentUploadProgress"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatPaymentInfo'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatPaymentInfo"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatRequestInfo'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatRequestInfo"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn,
  'chat.1.NotifyChat.ChatPromptUnfurl'?: (
    params: MessageTypes["chat.1.NotifyChat.ChatPromptUnfurl"]["inParam"] & {
      sessionID: number
    }
  ) => IncomingReturn
};

export type CustomResponseIncomingCallMap = {
  'chat.1.chatUi.chatAttachmentDownloadStart'?: (
    params: MessageTypes["chat.1.chatUi.chatAttachmentDownloadStart"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatAttachmentDownloadStart"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatAttachmentDownloadProgress'?: (
    params: MessageTypes["chat.1.chatUi.chatAttachmentDownloadProgress"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatAttachmentDownloadProgress"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatAttachmentDownloadDone'?: (
    params: MessageTypes["chat.1.chatUi.chatAttachmentDownloadDone"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatAttachmentDownloadDone"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatInboxUnverified'?: (
    params: MessageTypes["chat.1.chatUi.chatInboxUnverified"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatInboxUnverified"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatInboxConversation'?: (
    params: MessageTypes["chat.1.chatUi.chatInboxConversation"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatInboxConversation"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatInboxFailed'?: (
    params: MessageTypes["chat.1.chatUi.chatInboxFailed"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: ($PropertyType: MessageTypes["chat.1.chatUi.chatInboxFailed"]["outParam"]) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatThreadCached'?: (
    params: MessageTypes["chat.1.chatUi.chatThreadCached"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: ($PropertyType: MessageTypes["chat.1.chatUi.chatThreadCached"]["outParam"]) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatThreadFull'?: (
    params: MessageTypes["chat.1.chatUi.chatThreadFull"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: ($PropertyType: MessageTypes["chat.1.chatUi.chatThreadFull"]["outParam"]) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchHit'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchHit"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: ($PropertyType: MessageTypes["chat.1.chatUi.chatSearchHit"]["outParam"]) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchDone'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchDone"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: ($PropertyType: MessageTypes["chat.1.chatUi.chatSearchDone"]["outParam"]) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchInboxHit'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchInboxHit"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatSearchInboxHit"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchInboxDone'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchInboxDone"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatSearchInboxDone"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatSearchIndexStatus'?: (
    params: MessageTypes["chat.1.chatUi.chatSearchIndexStatus"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatSearchIndexStatus"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatConfirmChannelDelete'?: (
    params: MessageTypes["chat.1.chatUi.chatConfirmChannelDelete"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatConfirmChannelDelete"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatStellarShowConfirm'?: (
    params: MessageTypes["chat.1.chatUi.chatStellarShowConfirm"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatStellarShowConfirm"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatStellarDataConfirm'?: (
    params: MessageTypes["chat.1.chatUi.chatStellarDataConfirm"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatStellarDataConfirm"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatStellarDataError'?: (
    params: MessageTypes["chat.1.chatUi.chatStellarDataError"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatStellarDataError"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatStellarDone'?: (
    params: MessageTypes["chat.1.chatUi.chatStellarDone"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: ($PropertyType: MessageTypes["chat.1.chatUi.chatStellarDone"]["outParam"]) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatGiphySearchResults'?: (
    params: MessageTypes["chat.1.chatUi.chatGiphySearchResults"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatGiphySearchResults"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatGiphyToggleResultWindow'?: (
    params: MessageTypes["chat.1.chatUi.chatGiphyToggleResultWindow"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatGiphyToggleResultWindow"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatShowManageChannels'?: (
    params: MessageTypes["chat.1.chatUi.chatShowManageChannels"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatShowManageChannels"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatCoinFlipStatus'?: (
    params: MessageTypes["chat.1.chatUi.chatCoinFlipStatus"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatCoinFlipStatus"]["outParam"]
      ) => void
    }
  ) => IncomingReturn,
  'chat.1.chatUi.chatCommandMarkdown'?: (
    params: MessageTypes["chat.1.chatUi.chatCommandMarkdown"]["inParam"] & {
      sessionID: number
    },
    response: {
      error: IncomingErrorCallback,
      result: (
        $PropertyType: MessageTypes["chat.1.chatUi.chatCommandMarkdown"]["outParam"]
      ) => void
    }
  ) => IncomingReturn
};

export declare function localAddTeamMemberAfterResetRpcPromise(
  params: MessageTypes["chat.1.local.addTeamMemberAfterReset"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.addTeamMemberAfterReset"]["outParam"]>;

export declare function localBulkAddToConvRpcPromise(
  params: MessageTypes["chat.1.local.bulkAddToConv"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.bulkAddToConv"]["outParam"]>;

export declare function localCancelPostRpcPromise(
  params: MessageTypes["chat.1.local.CancelPost"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.CancelPost"]["outParam"]>;

export declare function localDeleteConversationLocalRpcPromise(
  params: MessageTypes["chat.1.local.deleteConversationLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.deleteConversationLocal"]["outParam"]>;

export declare function localDownloadFileAttachmentLocalRpcSaga(
  p: {
    params: MessageTypes["chat.1.local.DownloadFileAttachmentLocal"]["inParam"],
    incomingCallMap: IncomingCallMapType,
    customResponseIncomingCallMap?: CustomResponseIncomingCallMap,
    waitingKey?: WaitingKey
  }
): CallEffect<void, () => void, Array<void>>;

export declare function localFindConversationsLocalRpcPromise(
  params: MessageTypes["chat.1.local.findConversationsLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.findConversationsLocal"]["outParam"]>;

export declare function localGetGlobalAppNotificationSettingsLocalRpcPromise(
  params: MessageTypes["chat.1.local.getGlobalAppNotificationSettingsLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getGlobalAppNotificationSettingsLocal"]["outParam"]>;

export declare function localGetInboxAndUnboxUILocalRpcPromise(
  params: MessageTypes["chat.1.local.getInboxAndUnboxUILocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getInboxAndUnboxUILocal"]["outParam"]>;

export declare function localGetInboxNonblockLocalRpcSaga(
  p: {
    params: MessageTypes["chat.1.local.getInboxNonblockLocal"]["inParam"],
    incomingCallMap: IncomingCallMapType,
    customResponseIncomingCallMap?: CustomResponseIncomingCallMap,
    waitingKey?: WaitingKey
  }
): CallEffect<void, () => void, Array<void>>;

export declare function localGetNextAttachmentMessageLocalRpcPromise(
  params: MessageTypes["chat.1.local.getNextAttachmentMessageLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getNextAttachmentMessageLocal"]["outParam"]>;

export declare function localGetStaticConfigRpcPromise(
  params: MessageTypes["chat.1.local.getStaticConfig"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getStaticConfig"]["outParam"]>;

export declare function localGetTLFConversationsLocalRpcPromise(
  params: MessageTypes["chat.1.local.getTLFConversationsLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getTLFConversationsLocal"]["outParam"]>;

export declare function localGetTeamRetentionLocalRpcPromise(
  params: MessageTypes["chat.1.local.getTeamRetentionLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getTeamRetentionLocal"]["outParam"]>;

export declare function localGetThreadLocalRpcPromise(
  params: MessageTypes["chat.1.local.getThreadLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getThreadLocal"]["outParam"]>;

export declare function localGetThreadNonblockRpcSaga(
  p: {
    params: MessageTypes["chat.1.local.getThreadNonblock"]["inParam"],
    incomingCallMap: IncomingCallMapType,
    customResponseIncomingCallMap?: CustomResponseIncomingCallMap,
    waitingKey?: WaitingKey
  }
): CallEffect<void, () => void, Array<void>>;

export declare function localGetUnfurlSettingsRpcPromise(
  params: MessageTypes["chat.1.local.getUnfurlSettings"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getUnfurlSettings"]["outParam"]>;

export declare function localGetUnreadlineRpcPromise(
  params: MessageTypes["chat.1.local.getUnreadline"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getUnreadline"]["outParam"]>;

export declare function localGetUploadTempFileRpcPromise(
  params: MessageTypes["chat.1.local.getUploadTempFile"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.getUploadTempFile"]["outParam"]>;

export declare function localJoinConversationByIDLocalRpcPromise(
  params: MessageTypes["chat.1.local.joinConversationByIDLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.joinConversationByIDLocal"]["outParam"]>;

export declare function localLeaveConversationLocalRpcPromise(
  params: MessageTypes["chat.1.local.leaveConversationLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.leaveConversationLocal"]["outParam"]>;

export declare function localMakePreviewRpcPromise(
  params: MessageTypes["chat.1.local.makePreview"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.makePreview"]["outParam"]>;

export declare function localMakeUploadTempFileRpcPromise(
  params: MessageTypes["chat.1.local.makeUploadTempFile"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.makeUploadTempFile"]["outParam"]>;

export declare function localMarkAsReadLocalRpcPromise(
  params: MessageTypes["chat.1.local.markAsReadLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.markAsReadLocal"]["outParam"]>;

export declare function localNewConversationLocalRpcPromise(
  params: MessageTypes["chat.1.local.newConversationLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.newConversationLocal"]["outParam"]>;

export declare function localPostDeleteHistoryByAgeRpcPromise(
  params: MessageTypes["chat.1.local.postDeleteHistoryByAge"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.postDeleteHistoryByAge"]["outParam"]>;

export declare function localPostDeleteNonblockRpcPromise(
  params: MessageTypes["chat.1.local.postDeleteNonblock"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.postDeleteNonblock"]["outParam"]>;

export declare function localPostEditNonblockRpcPromise(
  params: MessageTypes["chat.1.local.postEditNonblock"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.postEditNonblock"]["outParam"]>;

export declare function localPostFileAttachmentLocalNonblockRpcPromise(
  params: MessageTypes["chat.1.local.postFileAttachmentLocalNonblock"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.postFileAttachmentLocalNonblock"]["outParam"]>;

export declare function localPostHeadlineNonblockRpcPromise(
  params: MessageTypes["chat.1.local.postHeadlineNonblock"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.postHeadlineNonblock"]["outParam"]>;

export declare function localPostHeadlineRpcPromise(
  params: MessageTypes["chat.1.local.postHeadline"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.postHeadline"]["outParam"]>;

export declare function localPostMetadataRpcPromise(
  params: MessageTypes["chat.1.local.postMetadata"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.postMetadata"]["outParam"]>;

export declare function localPostReactionNonblockRpcPromise(
  params: MessageTypes["chat.1.local.postReactionNonblock"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.postReactionNonblock"]["outParam"]>;

export declare function localPostTextNonblockRpcSaga(
  p: {
    params: MessageTypes["chat.1.local.postTextNonblock"]["inParam"],
    incomingCallMap: IncomingCallMapType,
    customResponseIncomingCallMap?: CustomResponseIncomingCallMap,
    waitingKey?: WaitingKey
  }
): CallEffect<void, () => void, Array<void>>;

export declare function localPreviewConversationByIDLocalRpcPromise(
  params: MessageTypes["chat.1.local.previewConversationByIDLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.previewConversationByIDLocal"]["outParam"]>;

export declare function localProfileChatSearchRpcPromise(
  params: MessageTypes["chat.1.local.profileChatSearch"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.profileChatSearch"]["outParam"]>;

export declare function localResolveUnfurlPromptRpcPromise(
  params: MessageTypes["chat.1.local.resolveUnfurlPrompt"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.resolveUnfurlPrompt"]["outParam"]>;

export declare function localRetryPostRpcPromise(
  params: MessageTypes["chat.1.local.RetryPost"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.RetryPost"]["outParam"]>;

export declare function localSaveUnfurlSettingsRpcPromise(
  params: MessageTypes["chat.1.local.saveUnfurlSettings"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.saveUnfurlSettings"]["outParam"]>;

export declare function localSetAppNotificationSettingsLocalRpcPromise(
  params: MessageTypes["chat.1.local.setAppNotificationSettingsLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.setAppNotificationSettingsLocal"]["outParam"]>;

export declare function localSetConvMinWriterRoleLocalRpcPromise(
  params: MessageTypes["chat.1.local.setConvMinWriterRoleLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.setConvMinWriterRoleLocal"]["outParam"]>;

export declare function localSetConvRetentionLocalRpcPromise(
  params: MessageTypes["chat.1.local.setConvRetentionLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.setConvRetentionLocal"]["outParam"]>;

export declare function localSetConversationStatusLocalRpcPromise(
  params: MessageTypes["chat.1.local.SetConversationStatusLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.SetConversationStatusLocal"]["outParam"]>;

export declare function localSetGlobalAppNotificationSettingsLocalRpcPromise(
  params: MessageTypes["chat.1.local.setGlobalAppNotificationSettingsLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.setGlobalAppNotificationSettingsLocal"]["outParam"]>;

export declare function localSetTeamRetentionLocalRpcPromise(
  params: MessageTypes["chat.1.local.setTeamRetentionLocal"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.setTeamRetentionLocal"]["outParam"]>;

export declare function localToggleMessageCollapseRpcPromise(
  params: MessageTypes["chat.1.local.toggleMessageCollapse"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.toggleMessageCollapse"]["outParam"]>;

export declare function localUnboxMobilePushNotificationRpcPromise(
  params: MessageTypes["chat.1.local.unboxMobilePushNotification"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.unboxMobilePushNotification"]["outParam"]>;

export declare function localUpdateTypingRpcPromise(
  params: MessageTypes["chat.1.local.updateTyping"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.updateTyping"]["outParam"]>;

export declare function localUpdateUnsentTextRpcPromise(
  params: MessageTypes["chat.1.local.updateUnsentText"]["inParam"],
  waitingKey?: WaitingKey
): Promise<MessageTypes["chat.1.local.updateUnsentText"]["outParam"]>;
